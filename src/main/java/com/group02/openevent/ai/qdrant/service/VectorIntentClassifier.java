package com.group02.openevent.ai.qdrant.service;

import com.group02.openevent.ai.qdrant.model.ActionType;
import com.group02.openevent.model.event.Event;
import com.group02.openevent.ai.service.EmbeddingService;
import com.group02.openevent.ai.service.EventVectorSearchService;
import jakarta.annotation.PostConstruct;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Service ƒë·ªÉ ph√¢n lo·∫°i √Ω ƒë·ªãnh ng∆∞·ªùi d√πng s·ª≠ d·ª•ng vector similarity
 * @author Admin
 */
@Service
@Slf4j
public class VectorIntentClassifier {

    private final Map<String, float[]> ticketInfoExampleVectors = new HashMap<>();
    private final QdrantService qdrantService;
    private final EmbeddingService embeddingService;
    private final EventVectorSearchService eventVectorSearchService;

    public VectorIntentClassifier(QdrantService qdrantService, EmbeddingService embeddingService,EventVectorSearchService eventVectorSearchService) {
        this.qdrantService = qdrantService;
        this.embeddingService = embeddingService;
        this.eventVectorSearchService = eventVectorSearchService;
    }

    /**
     * Tr√≠ch xu·∫•t t√™n s·ª± ki·ªán t·ª´ c√¢u n√≥i c·ªßa ng∆∞·ªùi d√πng b·∫±ng c√°ch s·ª≠ d·ª•ng EventVectorSearchService.
     * ƒê√¢y l√† ph∆∞∆°ng ph√°p ƒë√∫ng ƒë·∫Øn ƒë·ªÉ t√°ch bi·ªát vi·ªác t√¨m ki·∫øm th·ª±c th·ªÉ.
     *
     * @param userInput C√¢u n√≥i c·ªßa ng∆∞·ªùi d√πng.
     * @return T√™n c·ªßa s·ª± ki·ªán kh·ªõp nh·∫•t, ho·∫∑c chu·ªói r·ªóng n·∫øu kh√¥ng t√¨m th·∫•y.
     */
    public String extractEventName(String userInput) {
        System.out.println("üîç DEBUG: Extracting event name using EventVectorSearchService for: '" + userInput + "'");
        try {
            // G·ªçi service chuy√™n d·ª•ng ƒë·ªÉ t√¨m ki·∫øm s·ª± ki·ªán, ch·ªâ l·∫•y 1 k·∫øt qu·∫£ t·ªët nh·∫•t
            List<Event> foundEvents = eventVectorSearchService.searchEvents(userInput, 0L, 1); // userId=0 v√¨ ch∆∞a c·∫ßn l·ªçc

            if (foundEvents != null && !foundEvents.isEmpty()) {
                // L·∫•y t√™n t·ª´ s·ª± ki·ªán ƒë·∫ßu ti√™n (kh·ªõp nh·∫•t)
                Event bestMatch = foundEvents.get(0);
                String eventName = bestMatch.getTitle();
                System.out.println("‚úÖ DEBUG: Extracted event name: '" + eventName + "'");
                return eventName;
            } else {
                System.out.println("‚ùå DEBUG: EventVectorSearchService found no matching events.");
                return "";
            }
        } catch (Exception e) {
            log.error("L·ªói khi tr√≠ch xu·∫•t t√™n s·ª± ki·ªán: {}", e.getMessage(), e);
            return ""; // Tr·∫£ v·ªÅ r·ªóng n·∫øu c√≥ l·ªói
        }
    }

    @PostConstruct
    public void initializeExampleVectors() {
        log.info("ƒêang kh·ªüi t·∫°o v√† t√≠nh to√°n tr∆∞·ªõc c√°c vector m·∫´u cho vi·ªác h·ªèi th√¥ng tin v√©...");
        String[] ticketInfoExamples = {
                "gi√° v√© s·ª± ki·ªán l√† bao nhi√™u",
                "v√© th∆∞·ªùng c√≥ gi√° bao nhi√™u",
                "v√© vip gi√° bao nhi√™u ti·ªÅn",
                "c√≥ nh·ªØng lo·∫°i v√© n√†o",
                "v√© n√†o c√≤n s·∫µn",
                "th√¥ng tin v√© s·ª± ki·ªán",
                "chi ti·∫øt gi√° v√©",
                "coi l·∫°i v√© th∆∞·ªùng",
                "xem gi√° v√© vip",
                "bao nhi√™u ti·ªÅn m·ªôt v√©",
                "gi√° c·∫£ c√°c lo·∫°i v√©",
                "v√© c√≤n l·∫°i bao nhi√™u"
        };

        for (String example : ticketInfoExamples) {
            try {
                float[] vector = embeddingService.getEmbedding(example);
                this.ticketInfoExampleVectors.put(example, vector);
            } catch (Exception e) {
                log.error("L·ªói khi t·∫°o embedding cho c√¢u m·∫´u: '{}'. B·ªè qua c√¢u n√†y.", example, e);
            }
        }
        log.info("Ho√†n t·∫•t kh·ªüi t·∫°o {} vector m·∫´u.", this.ticketInfoExampleVectors.size());
    }

    public ActionType classifyIntent(String userInput, float[] userVector) {
        try {
            if (userInput == null || userInput.trim().isEmpty()) {
                return ActionType.UNKNOWN;
            }

            // Ki·ªÉm tra c√¢u h·ªèi v·ªÅ th√¥ng tin v√© tr∆∞·ªõc
            if (isTicketInfoQuery(userInput, userVector)) {
                return ActionType.QUERY_TICKET_INFO;
            }

            List<Map<String, Object>> results = qdrantService.searchSimilarVectors(userVector, 3);

            if (results == null || results.isEmpty()) {
                return ActionType.UNKNOWN;
            }

            Map<String, Object> bestMatch = results.get(0);
            if (bestMatch == null) {
                return ActionType.UNKNOWN;
            }

            // Defensive cast for score
            Number scoreNum = (Number) bestMatch.getOrDefault("score", 0);
            double score = scoreNum.doubleValue();

            if (score < 0.80) {
                return ActionType.UNKNOWN;
            }

            Map<String, Object> payload = (Map<String, Object>) bestMatch.get("payload");
            if (payload == null) {
                return ActionType.UNKNOWN;
            }
            
            String typeString = (String) payload.getOrDefault("type", "unknown");
            return ActionType.fromString(typeString);

        } catch (Exception e) {
            e.printStackTrace();
            return ActionType.UNKNOWN; // Return UNKNOWN instead of ERROR for graceful fallback
        }
    }
    public String classifyWeather(String userInput,  float[] userVector) {
        try {
            if (userInput == null || userInput.trim().isEmpty()) {
                return "UNKNOWN";
            }

            List<Map<String, Object>> results = qdrantService.searchSimilarVectors(userVector, 3);
            System.out.println(results);
            
            if (results == null || results.isEmpty()) {
                return "EMPTY";
            }

            Map<String, Object> bestMatch = results.get(0);
            if (bestMatch == null) {
                return "UNKNOWN";
            }

            Number scoreNum = (Number) bestMatch.getOrDefault("score", 0);
            double score = scoreNum.doubleValue();
            System.out.println(score);
            
            if (score < 0.6) {
                return "<0.6";
            }

            Map<String, Object> payload = (Map<String, Object>) bestMatch.get("payload");
            if (payload == null) {
                return "UNKNOWN";
            }
            
            String typeString = (String) payload.getOrDefault("type", "unknown");
            return typeString;

        } catch (Exception e) {
            e.printStackTrace();
            return "UNKNOWN";
        }
    }
    public String classifyEventTitle(String userInput, float[] queryVector) {
        try {
            if (queryVector == null) {
                return "";
            }

            // 1. CHU·∫®N B·ªä B·ªò L·ªåC TH·ªúI GIAN (Quan tr·ªçng: Ch·ªâ t√¨m s·ª± ki·ªán s·∫Øp t·ªõi/ƒëang di·ªÖn ra)
            long currentTimestamp = java.time.Instant.now().getEpochSecond();

            Map<String, Object> timeFilter = Map.of(
                    "key", "endsAt", // Gi·∫£ ƒë·ªãnh b·∫°n l∆∞u 'endsAt' d∆∞·ªõi d·∫°ng timestamp trong payload
                    "range", Map.of("gt", currentTimestamp) // Ch·ªâ t√¨m s·ª± ki·ªán ch∆∞a k·∫øt th√∫c
            );

            Map<String, Object> filter = Map.of(
                    "must", List.of(
                            // Ch·ªâ t√¨m ki·∫øm c√°c vector s·ª± ki·ªán
                            Map.of("key", "kind", "match", Map.of("value", "event")),
                            timeFilter
                    )
            );

            // 2. T√åM KI·∫æM VECTOR S·ª∞ KI·ªÜN V·ªöI FILTER
            // C·∫ßn ph∆∞∆°ng th·ª©c searchSimilarVectorsWithFilter(vector, limit, filter) trong QdrantService
            List<Map<String, Object>> results = qdrantService.searchSimilarVectorsWithFilter(queryVector, 1, filter);

            if (results == null || results.isEmpty()) {
                return ""; // Kh√¥ng t√¨m th·∫•y s·ª± ki·ªán s·∫Øp t·ªõi n√†o t∆∞∆°ng ƒë·ªìng
            }

            Map<String, Object> bestMatch = results.get(0);
            Number scoreNum = (Number) bestMatch.getOrDefault("score", 0);
            double score = scoreNum.doubleValue();

            // 3. ƒêI·ªÄU KI·ªÜN NG∆Ø·ª†NG ƒêI·ªÇM
            // Ch·ªâ l·∫•y k·∫øt qu·∫£ n·∫øu ƒëi·ªÉm t∆∞∆°ng ƒë·ªìng ƒë·ªß cao (v√≠ d·ª•: > 0.85)
            if (score < 0.85) {
                return "";
            }

            // 4. TR·∫¢ V·ªÄ TI√äU ƒê·ªÄ S·ª∞ KI·ªÜN T·ª™ PAYLOAD
            Map<String, Object> payload = (Map<String, Object>) bestMatch.get("payload");
            if (payload != null) {
                // Gi·∫£ ƒë·ªãnh ti√™u ƒë·ªÅ s·ª± ki·ªán ƒë∆∞·ª£c l∆∞u trong payload d∆∞·ªõi key "title"
                String title = (String) payload.getOrDefault("title", "");
                return title.trim();
            }

            return "";

        } catch (Exception e) {
            log.error("Error during classifyEventTitle (Vector Search): {}", e.getMessage(), e);
            return "";
        }
    }
    public String classifyToolEvent(String userInput, float[] userVector) {
        try {
            if (userInput == null || userInput.trim().isEmpty()) {
                return "UNKNOWN";
            }

            List<Map<String, Object>> results = qdrantService.searchSimilarVectors(userVector, 3);
            System.out.println(results);
            
            if (results == null || results.isEmpty()) {
                return "";
            }

            Map<String, Object> bestMatch = results.get(0);
            if (bestMatch == null) {
                return "UNKNOWN";
            }

            Number scoreNum = (Number) bestMatch.getOrDefault("score", 0);
            double score = scoreNum.doubleValue();
            System.out.println(score);
            
            if (score < 0.8) {
                return "<0.8";
            }

            Map<String, Object> payload = (Map<String, Object>) bestMatch.get("payload");
            if (payload == null) {
                return "UNKNOWN";
            }
            
            String typeString = (String) payload.getOrDefault("toolName", "unknown");
            return typeString;

        } catch (Exception e) {
            e.printStackTrace();
            return "UNKNOWN";
        }
    }
    
    /**
     * Extract event name from buy ticket intent using AI
     */
    public String extractEventNameFromBuyTicketIntent(String userInput, float[] userVector) {
        try {
            if (userInput == null || userInput.trim().isEmpty()) {
                return "";
            }
            
            // Use LLM to extract event name more intelligently
            String prompt = String.format("""
                T·ª´ c√¢u sau, h√£y tr√≠ch xu·∫•t t√™n s·ª± ki·ªán m√† ng∆∞·ªùi d√πng mu·ªën mua v√©:
                C√¢u: "%s"
                
                Ch·ªâ tr·∫£ v·ªÅ t√™n s·ª± ki·ªán, kh√¥ng c√≥ t·ª´ n√†o kh√°c.
                V√≠ d·ª•: "Music Night", "Tech Conference", "Workshop AI"
                
                N·∫øu kh√¥ng t√¨m th·∫•y t√™n s·ª± ki·ªán r√µ r√†ng, tr·∫£ v·ªÅ "UNKNOWN".
                """, userInput);

            List<Map<String, Object>> results = qdrantService.searchSimilarVectors(userVector, 5);
            
            if (results != null && !results.isEmpty()) {
                // Look for event-related patterns in results
                for (Map<String, Object> result : results) {
                    Map<String, Object> payload = (Map<String, Object>) result.get("payload");
                    if (payload != null) {
                        String eventName = (String) payload.get("eventName");
                        if (eventName != null && !eventName.trim().isEmpty()) {
                            return eventName.trim();
                        }
                    }
                }
            }
            
            // Fallback: Use embedding-based extraction
            return extractEventNameWithEmbedding(userInput);
            
        } catch (Exception e) {
            e.printStackTrace();
            return extractEventNameWithEmbedding(userInput);
        }
    }
    
    /**
     * Fallback method using embedding similarity to extract event name
     */
    private String extractEventNameWithEmbedding(String userInput) {
        try {
            System.out.println("üîç DEBUG: Extracting event name with embedding for: '" + userInput + "'");
            
            // T·∫°o embedding cho user input
            float[] userVector = embeddingService.getEmbedding(userInput);
            
            // T√¨m ki·∫øm s·ª± ki·ªán trong Qdrant
            List<Map<String, Object>> results = qdrantService.searchSimilarVectors(userVector, 5);
            
            if (results != null && !results.isEmpty()) {
                for (Map<String, Object> result : results) {
                    Map<String, Object> payload = (Map<String, Object>) result.get("payload");
                    if (payload != null) {
                        String eventName = (String) payload.get("eventName");
                        if (eventName != null && !eventName.trim().isEmpty()) {
                            System.out.println("‚úÖ DEBUG: Found event name via embedding: '" + eventName + "'");
                            return eventName.trim();
                        }
                    }
                }
            }
            
            // Fallback: Simple regex extraction
            return extractEventNameWithRegex(userInput);
            
        } catch (Exception e) {
            System.out.println("‚ùå DEBUG: Error in embedding event name extraction: " + e.getMessage());
            return extractEventNameWithRegex(userInput);
        }
    }
    
    /**
     * Fallback method using regex patterns
     */
    private String extractEventNameWithRegex(String userInput) {
        // Common patterns for event names in buy ticket requests
        String[] patterns = {
            "(?:mua v√©|mua ve|ƒëƒÉng k√Ω|ƒëƒÉng ky|tham gia|ƒë·∫∑t v√©|dat ve|book v√©|order v√©)\\s+(?:s·ª± ki·ªán|su kien|event)?\\s*:?\\s*([^,]+)",
            "(?:cho|v·ªÅ|t·∫°i)\\s+([^,]+?)(?:\\s|$)",
            "(?:t√™n|ten)\\s*(?:s·ª± ki·ªán|su kien|event)?\\s*:?\\s*([^,]+)",
            "\"([^\"]+)\"",
            "'([^']+)'"
        };
        
        for (String pattern : patterns) {
            java.util.regex.Pattern p = java.util.regex.Pattern.compile(pattern, java.util.regex.Pattern.CASE_INSENSITIVE);
            java.util.regex.Matcher m = p.matcher(userInput);
            if (m.find()) {
                String eventName = m.group(1).trim();
                // Clean up common words
                eventName = eventName.replaceAll("(?i)\\b(s·ª± ki·ªán|su kien|event|cho|v·ªÅ|t·∫°i)\\b", "").trim();
                if (!eventName.isEmpty() && eventName.length() > 2) {
                    return eventName;
                }
            }
        }
        
        return "";
    }
    
    /**
     * Classify user intent as CONFIRM_ORDER, CANCEL_ORDER, or UNKNOWN
     * for order confirmation scenarios
     */
    public ActionType classifyConfirmIntent(String userInput, float[] userVector) {
        try {
            if (userInput == null || userInput.trim().isEmpty()) {
                return ActionType.UNKNOWN;
            }

            List<Map<String, Object>> results = qdrantService.searchSimilarVectors(userVector, 3);
            
            if (results != null && !results.isEmpty()) {
                Map<String, Object> bestMatch = results.get(0);
                if (bestMatch != null) {
                    Number scoreNum = (Number) bestMatch.getOrDefault("score", 0);
                    double score = scoreNum.doubleValue();
                    
                    if (score >= 0.75) { // High confidence threshold for confirm/cancel
                        Map<String, Object> payload = (Map<String, Object>) bestMatch.get("payload");
                        if (payload != null) {
                            String intentType = (String) payload.getOrDefault("intentType", "unknown");
                            return ActionType.fromString(intentType);
                        }
                    }
                }
            }
            
            // Fallback: Pattern-based classification with improved regex
            return classifyConfirmIntentWithPatterns(userInput);
            
        } catch (Exception e) {
            e.printStackTrace();
            return classifyConfirmIntentWithPatterns(userInput);
        }
    }
    
    /**
     * Fallback pattern-based classification for confirm/cancel intents
     */
    private ActionType classifyConfirmIntentWithPatterns(String userInput) {
        String lowerInput = userInput.toLowerCase().trim();
        
        // Strong confirm patterns (high priority)
        String[] strongConfirmPatterns = {
            "c√≥", "co", "yes", "ok", "okay", "ƒë·ªìng √Ω", "dong y",
            "x√°c nh·∫≠n", "xac nhan", "confirm", "agree", "accept",
            "ti·∫øp t·ª•c", "tiep tuc", "continue", "proceed",
            "t√¥i ƒë·ªìng √Ω", "toi dong y", "i agree", "i confirm",
            "ch·∫Øc ch·∫Øn", "chac chan", "sure", "definitely"
        };
        
        // Strong cancel patterns (high priority)
        String[] strongCancelPatterns = {
            "kh√¥ng", "khong", "no", "cancel", "h·ªßy", "huy",
            "t·ª´ ch·ªëi", "tu choi", "refuse", "reject", "decline",
            "d·ª´ng l·∫°i", "dung lai", "stop", "abort", "quit",
            "t√¥i kh√¥ng mu·ªën", "toi khong muon", "i don't want",
            "kh√¥ng ƒë·ªìng √Ω", "khong dong y", "disagree"
        };
        
        // Check for strong confirm patterns
        for (String pattern : strongConfirmPatterns) {
            if (lowerInput.contains(pattern)) {
                return ActionType.CONFIRM_ORDER;
            }
        }
        
        // Check for strong cancel patterns
        for (String pattern : strongCancelPatterns) {
            if (lowerInput.contains(pattern)) {
                return ActionType.CANCEL_ORDER;
            }
        }
        
        // Weak patterns (lower priority, context dependent)
        String[] weakConfirmPatterns = {
            "ti·∫øn h√†nh", "tien hanh", "go ahead", "let's go",
            "ƒë∆∞·ª£c", "duoc", "fine", "good", "alright"
        };
        
        String[] weakCancelPatterns = {
            "th√¥i", "thoi", "never mind", "forget it",
            "kh√¥ng c·∫ßn", "khong can", "not needed"
        };
        
        // Check weak patterns only if no strong pattern found
        for (String pattern : weakConfirmPatterns) {
            if (lowerInput.contains(pattern)) {
                return ActionType.CONFIRM_ORDER;
            }
        }
        
        for (String pattern : weakCancelPatterns) {
            if (lowerInput.contains(pattern)) {
                return ActionType.CANCEL_ORDER;
            }
        }
        
        // Default to unknown if no clear pattern
        return ActionType.UNKNOWN;
    }

    /**
     * Ki·ªÉm tra xem user input c√≥ ph·∫£i l√† c√¢u h·ªèi v·ªÅ th√¥ng tin v√© kh√¥ng s·ª≠ d·ª•ng embedding similarity
     */
    public boolean isTicketInfoQuery(String userInput, float[] userVector) {
        if (userInput == null || userInput.trim().isEmpty()) {
            return false;
        }
        
        System.out.println("üîç DEBUG: Checking ticket info query with embedding for: '" + userInput + "'");
        
        try {

            
            // T√≠nh similarity v·ªõi t·ª´ng c√¢u m·∫´u
            double maxSimilarity = 0.0;
            String bestMatch = "";

            for (Map.Entry<String, float[]> entry : this.ticketInfoExampleVectors.entrySet()) {
                String exampleText = entry.getKey();
                float[] exampleVector = entry.getValue(); // L·∫•y vector ƒë√£ ƒë∆∞·ª£c t√≠nh s·∫µn

                double similarity = cosineSimilarity(userVector, exampleVector);

                if (similarity > maxSimilarity) {
                    maxSimilarity = similarity;
                    bestMatch = exampleText;
                }
            }
            
            System.out.println("üéØ DEBUG: Best match: '" + bestMatch + "' with similarity: " + maxSimilarity);
            
            // Ng∆∞·ª°ng similarity ƒë·ªÉ x√°c ƒë·ªãnh l√† c√¢u h·ªèi v·ªÅ th√¥ng tin v√©
            double threshold = 0.75;
            
            if (maxSimilarity >= threshold) {
                System.out.println("‚úÖ DEBUG: Detected ticket info query with similarity: " + maxSimilarity);
                return true;
            } else {
                System.out.println("‚ùå DEBUG: Not a ticket info query. Max similarity: " + maxSimilarity + " (threshold: " + threshold + ")");
                return false;
            }
            
        } catch (Exception e) {
            System.out.println("‚ùå DEBUG: Error in embedding similarity check: " + e.getMessage());
            System.out.println("üîÑ DEBUG: Falling back to keyword matching...");
            
            // Fallback: s·ª≠ d·ª•ng keyword matching
            String lowerInput = userInput.toLowerCase().trim();
            String[] ticketInfoKeywords = {
                "gi√° v√©", "gi√° ti·ªÅn", "bao nhi√™u ti·ªÅn", "gi√° c·∫£",
                "v√© th∆∞·ªùng", "v√© vip", "v√© early bird", "lo·∫°i v√©",
                "c√≥ nh·ªØng lo·∫°i v√© n√†o", "v√© n√†o c√≥ s·∫µn", "v√© c√≤n l·∫°i",
                "coi l·∫°i v√©", "xem v√©", "th√¥ng tin v√©", "chi ti·∫øt v√©"
            };
            
            for (String keyword : ticketInfoKeywords) {
                if (lowerInput.contains(keyword)) {
                    System.out.println("‚úÖ DEBUG: Found ticket info keyword: '" + keyword + "'");
                    return true;
                }
            }
            
            System.out.println("‚ùå DEBUG: No ticket info keywords found");
            return false;
        }
    }
    
    /**
     * T√≠nh cosine similarity gi·ªØa hai vector
     */
    private double cosineSimilarity(float[] vectorA, float[] vectorB) {
        if (vectorA.length != vectorB.length) {
            return 0.0;
        }
        
        double dotProduct = 0.0;
        double normA = 0.0;
        double normB = 0.0;
        
        for (int i = 0; i < vectorA.length; i++) {
            dotProduct += vectorA[i] * vectorB[i];
            normA += Math.pow(vectorA[i], 2);
            normB += Math.pow(vectorB[i], 2);
        }
        
        return dotProduct / (Math.sqrt(normA) * Math.sqrt(normB));
    }
}

