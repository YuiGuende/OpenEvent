package com.group02.openevent.ai.service;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.group02.openevent.ai.dto.Action;
import com.group02.openevent.ai.dto.Message;
import com.group02.openevent.ai.dto.TimeSlot;
import com.group02.openevent.ai.qdrant.model.ActionType;
import com.group02.openevent.ai.qdrant.model.PendingEvent;
import com.group02.openevent.ai.qdrant.model.TimeContext;
import com.group02.openevent.ai.qdrant.service.QdrantService;
import com.group02.openevent.ai.qdrant.service.VectorIntentClassifier;
import com.group02.openevent.model.enums.EventStatus;
import com.group02.openevent.model.enums.EventType;
import com.group02.openevent.model.event.Event;
import com.group02.openevent.model.event.Place;
import com.group02.openevent.model.ticket.TicketType;
import com.group02.openevent.model.user.Customer;
import com.group02.openevent.repository.IUserRepo;
import com.group02.openevent.service.EventService;
import com.group02.openevent.service.PlaceService;
import com.group02.openevent.service.TicketTypeService;
import com.group02.openevent.util.TimeSlotUnit;
import jakarta.servlet.http.HttpServletResponse;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.io.Serializable;
import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Service
@Slf4j
public class EventAIAgent implements Serializable {

    private final LLM llm;
    private final EmbeddingService embeddingService;
    private final QdrantService qdrantService;
    private final PlaceService placeService;
    private final EventService eventService;
    private final AgentEventService agentEventService;
    private final VectorIntentClassifier classifier;
    private final WeatherService weatherService;
    private final List<Message> conversationHistory;
    private final EventVectorSearchService eventVectorSearchService;
    private final OrderAIService orderAIService;
    private final IUserRepo userRepo;
    private final TicketTypeService ticketTypeService;
    private final Map<String, PendingEvent> pendingEvents = new HashMap<>();

    public EventAIAgent(EmbeddingService embeddingService,
                        PlaceService placeService,
                        EventService eventService,
                        AgentEventService agentEventService,
                        VectorIntentClassifier classifier,
                        WeatherService weatherService,
                        LLM llm,QdrantService qdrantService,
                        EventVectorSearchService eventVectorSearchService,
                        OrderAIService orderAIService,
                        IUserRepo userRepo,
                        TicketTypeService ticketTypeService) {

        this.embeddingService = embeddingService;
        this.placeService = placeService;
        this.eventService = eventService;
        this.agentEventService = agentEventService;
        this.classifier = classifier;
        this.weatherService = weatherService;
        this.eventVectorSearchService = eventVectorSearchService;
        this.llm = llm;
        this.qdrantService = qdrantService;
        this.orderAIService = orderAIService;
        this.userRepo = userRepo;
        this.ticketTypeService = ticketTypeService;
        // Kh·ªüi t·∫°o c√°c tr∆∞·ªùng non-final
        this.conversationHistory = new ArrayList<>();
        // this.pendingEvents ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o ·ªü tr√™n
        initializeSystemMessage();
    }

        private void initializeSystemMessage() {
            StringBuilder systemPrompt = new StringBuilder();

            systemPrompt.append("""
B·∫°n l√† m·ªôt Tr·ª£ l√Ω AI gi√∫p ng∆∞·ªùi d√πng qu·∫£n l√Ω s·ª± ki·ªán v√† lu√¥n nh·ªõ c√°c ng√†y l·ªÖ v√† s·ª± ki·ªán quan tr·ªçng c·ªßa Vi·ªát Nam.
H√£y hi·ªÉu ng√¥n ng·ªØ t·ª± nhi√™n, linh ho·∫°t v·ªõi c√°c m√¥ t·∫£ nh∆∞ "t·ªëi nay", "cu·ªëi tu·∫ßn", v.v.

## M·ª§C TI√äU:
- G·ª£i √Ω, t·∫°o, s·ª≠a, ho·∫∑c xo√° s·ª± ki·ªán.
- Lu√¥n ph·∫£n h·ªìi b·∫±ng vƒÉn b·∫£n t·ª± nhi√™n (kh√¥ng hi·ªán JSON).
- N·∫øu thi·∫øu th√¥ng tin, h√£y h·ªèi l·∫°i ng∆∞·ªùi d√πng.
- B·∫°n h√£y ph·∫£n h·ªìi d·ª±a theo system message

## X·ª¨ L√ù T·∫†O S·ª∞ KI·ªÜN:
1. N·∫øu ng∆∞·ªùi d√πng y√™u c·∫ßu t·∫°o s·ª± ki·ªán:
- Khi ng∆∞·ªùi d√πng y√™u c·∫ßu t·∫°o s·ª± ki·ªán (v√≠ d·ª•: "L√™n s·ª± ki·ªán", "T·∫°o s·ª± ki·ªán",...), b·∫°n ph·∫£i x√°c ƒë·ªãnh v√† xu·∫•t h√†nh ƒë·ªông n·ªôi b·ªô l√† `ADD_EVENT`.
- N·∫øu th√¥ng tin s·ª± ki·ªán ƒë·∫ßy ƒë·ªß (ti√™u ƒë·ªÅ, th·ªùi gian b·∫Øt ƒë·∫ßu, th·ªùi gian k·∫øt th√∫c, ƒë·ªãa ƒëi·ªÉm...), h√£y xu·∫•t ra m·ªôt JSON h√†nh ƒë·ªông n·ªôi b·ªô theo ƒë·ªãnh d·∫°ng sau:            
   [
     {
       "toolName": "ADD_EVENT",
           "args": {
             "event_title": "...",        
             "starts_at": "YYYY-MM-DDTHH:mm", 
             "ends_at": "YYYY-MM-DDTHH:mm",    
             "place": "...",                 
             "description": "...",
             "event_type": "...",       
             "capacity": 100,
       }
     }
   ]
- Kh√¥ng gi·∫£i th√≠ch hay hi·ªÉn th·ªã n·ªôi dung JSON cho ng∆∞·ªùi d√πng.
2. N·∫øu th·ªùi ti·∫øt c√≥ kh·∫£ nƒÉng m∆∞a (do h·ªá th·ªëng th·ªùi ti·∫øt tr·∫£ v·ªÅ), h√£y ph·∫£n h·ªìi nh∆∞ sau:
   - V√≠ d·ª•: "üåß Th·ªùi ti·∫øt c√≥ th·ªÉ c√≥ m∆∞a v√†o th·ªùi gian n√†y. B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c t·∫°o s·ª± ki·ªán ngo√†i tr·ªùi n√†y kh√¥ng?"
   - N·∫øu ng∆∞·ªùi d√πng x√°c nh·∫≠n "c√≥", ti·∫øp t·ª•c t·∫°o s·ª± ki·ªán tr∆∞·ªõc ƒë√≥ ƒëang ch·ªù (`PendingEvent`).
   - N·∫øu ng∆∞·ªùi d√πng t·ª´ ch·ªëi, kh√¥ng t·∫°o s·ª± ki·ªán.

3. N·∫øu ƒê·ªãa ƒëi·ªÉm v√† th·ªùi gian y√™u c·∫ßu tr√πng v·ªõi s·ª± ki·ªán ƒë√£ c√≥:
   - **Kh√¥ng t·ª± √Ω t·∫°o s·ª± ki·ªán!**
   - H·ªèi l·∫°i ng∆∞·ªùi d√πng:  
     > "‚è∞ Th·ªùi gian b·∫°n ch·ªçn ƒëang b·ªã tr√πng v·ªõi m·ªôt s·ª± ki·ªán kh√°c. B·∫°n c√≥ mu·ªën ch·ªçn th·ªùi gian ho·∫∑c ƒë·ªãa ƒëi·ªÉm kh√°c kh√¥ng?"

## KHI S·ª¨A S·ª∞ KI·ªÜN:
- Khi ng∆∞·ªùi d√πng n√≥i c√°c c√¢u nh∆∞:
    -"Thay ƒë·ªïi th·ªùi gian c·ªßa s·ª± ki·ªán `workshop` l·∫°i"
    -"S·ª≠a s·ª± ki·ªán `event_id` = 1"
    -"Update s·ª± ki·ªán"
    => Hi·ªÉu l√† ng∆∞·ªùi d√πng mu·ªën** S·ª≠a s·ª± ki·ªán"
- N·∫øu c√≥ `event_id`, d√πng n√≥.
- N·∫øu kh√¥ng, d√πng `original_title` ƒë·ªÉ t√¨m s·ª± ki·ªán c·∫ßn s·ª≠a.
- V√≠ d·ª•:
[
  {
    "toolName": "UPDATE_EVENT",
    "args": {
      "event_id": 123,
      "original_title": "workshop c≈©",
      "title": "workshop m·ªõi",
      "start_time": "YYYY-MM-DDTHH:mm",
      "description": "m√¥ t·∫£ m·ªõi"
    }
  }
]
- Kh√¥ng gi·∫£i th√≠ch hay hi·ªÉn th·ªã n·ªôi dung JSON cho ng∆∞·ªùi d√πng.

## KHI XO√Å S·ª∞ KI·ªÜN:
- Khi ng∆∞·ªùi d√πng n√≥i c√°c c√¢u nh∆∞:
    -"X√≥a s·ª± ki·ªán `music` ng√†y 21 th√°ng 7"
    -"X√≥a cu·ªôc thi Hackathon"
    -"X√≥a s·ª± ki·ªán `event_id` = 1"
    => Hi·ªÉu l√† ng∆∞·ªùi d√πng mu·ªën** X√≥a s·ª± ki·ªán"
- D√πng `event_id` n·∫øu c√≥, ho·∫∑c `title` n·∫øu kh√¥ng c√≥ ID.
- V√≠ d·ª•:
[
  { "toolName": "DELETE_EVENT", "args": { "event_id": 42 } }
]
ho·∫∑c
[
  { "toolName": "DELETE_EVENT", "args": { "title": "T√™n s·ª± ki·ªán" } }
]
- Kh√¥ng gi·∫£i th√≠ch hay hi·ªÉn th·ªã n·ªôi dung JSON cho ng∆∞·ªùi d√πng.
                            

## NGUY√äN T·∫ÆC:
- Tr√°nh d√πng t·ª´ k·ªπ thu·∫≠t v·ªõi ng∆∞·ªùi d√πng.
- Lu√¥n ƒë·∫£m b·∫£o r·∫±ng c√°c tr∆∞·ªùng T√äN S·ª∞ KI·ªÜN, TH·ªúI GIAN B·∫ÆT ƒê·∫¶U/K·∫æT TH√öC, v√† ƒê·ªäA ƒêI·ªÇM ƒë·ªÅu ƒë∆∞·ª£c x√°c ƒë·ªãnh. N·∫øu b·∫•t k·ª≥ tr∆∞·ªùng n√†o b·ªã thi·∫øu, h√£y h·ªèi l·∫°i ng∆∞·ªùi d√πng.
- N·∫øu ph√°t hi·ªán ƒë·ªãa ƒëi·ªÉm v√† th·ªùi gian b·ªã tr√πng v·ªõi s·ª± ki·ªán kh√°c, h√£y h·ªèi l·∫°i ng∆∞·ªùi d√πng m·ªôt th·ªùi gian kh√°c ho·∫∑c m·ªôt ƒë·ªãa ƒëi·ªÉm kh√°c. Kh√¥ng t·ª± √Ω th√™m n·∫øu b·ªã tr√πng.
- Lu√¥n di·ªÖn gi·∫£i √Ω ƒë·ªãnh r√µ r√†ng, th√¢n thi·ªán.
- Ng√†y hi·ªán t·∫°i l√† """ + LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy")) + ".\n");
// Kh√¥ng c·∫ßn ƒëo·∫°n hi·ªÉn th·ªã m√¥ t·∫£ l·∫°i n·ªôi dung cho ng∆∞·ªùi d√πng n·ªØa
            systemPrompt.append("- N·∫øu ch∆∞a r√µ n·ªôi dung ho·∫∑c ng∆∞·ªùi d√πng ch∆∞a x√°c nh·∫≠n th·ªùi gian g·ª£i √Ω, h√£y h·ªèi l·∫°i ng∆∞·ªùi d√πng tr∆∞·ªõc khi tr·∫£ v·ªÅ JSON.\n");

            systemPrompt.append("C√°c lo·∫°i Event:\n");
            for (EventType type : EventType.values()) {
                systemPrompt.append("- ").append(type.name()).append("\n");
            }

            systemPrompt.append("""

## X·ª¨ L√ù MUA V√â S·ª∞ KI·ªÜN:
1. Khi ng∆∞·ªùi d√πng mu·ªën mua v√© (v√≠ d·ª•: "Mua v√© s·ª± ki·ªán X", "ƒêƒÉng k√Ω tham gia Y", "ƒê·∫∑t v√© Z"):
   - H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông t√¨m s·ª± ki·ªán theo t√™n
   - Hi·ªÉn th·ªã danh s√°ch lo·∫°i v√© c√≥ s·∫µn v·ªõi gi√° v√† s·ªë l∆∞·ª£ng c√≤n l·∫°i
   - H∆∞·ªõng d·∫´n ng∆∞·ªùi d√πng ch·ªçn lo·∫°i v√© ph√π h·ª£p

2. Khi ng∆∞·ªùi d√πng ch·ªçn lo·∫°i v√©:
   - X√°c nh·∫≠n lo·∫°i v√© ƒë√£ ch·ªçn v√† gi√°
   - Y√™u c·∫ßu th√¥ng tin ng∆∞·ªùi tham gia: t√™n, email, s·ªë ƒëi·ªán tho·∫°i

3. Khi ng∆∞·ªùi d√πng cung c·∫•p th√¥ng tin:
   - Tr√≠ch xu·∫•t c√°c th√¥ng tin: t√™n, email, SƒêT
   - Hi·ªÉn th·ªã t√≥m t·∫Øt ƒë∆°n h√†ng ƒë·∫ßy ƒë·ªß
   - Y√™u c·∫ßu x√°c nh·∫≠n cu·ªëi c√πng (C√≥/Kh√¥ng)

4. Khi ng∆∞·ªùi d√πng x√°c nh·∫≠n:
   - H·ªá th·ªëng t·ª± ƒë·ªông t·∫°o ƒë∆°n h√†ng
   - T·∫°o payment link qua PayOS
   - Tr·∫£ v·ªÅ link thanh to√°n cho ng∆∞·ªùi d√πng

**L∆ØU √ù QUAN TR·ªåNG V·ªÄ MUA V√â:**
- Quy tr√¨nh mua v√© ƒë∆∞·ª£c x·ª≠ l√Ω T·ª∞ ƒê·ªòNG b·ªüi h·ªá th·ªëng
- KH√îNG c·∫ßn xu·∫•t JSON cho ch·ª©c nƒÉng mua v√©
- Ch·ªâ tr·∫£ l·ªùi t·ª± nhi√™n v√† h∆∞·ªõng d·∫´n ng∆∞·ªùi d√πng
- N·∫øu thi·∫øu th√¥ng tin, h·ªèi l·∫°i ng∆∞·ªùi d√πng m·ªôt c√°ch th√¢n thi·ªán
- N·∫øu v√© ƒë√£ h·∫øt, ƒë·ªÅ xu·∫•t c√°c lo·∫°i v√© kh√°c c√≤n s·∫µn
- Lu√¥n x√°c nh·∫≠n l·∫°i tr∆∞·ªõc khi t·∫°o ƒë∆°n h√†ng

## X·ª¨ L√ù G·ª¨I EMAIL NH·∫ÆC NH·ªû:
1. Khi ng∆∞·ªùi d√πng y√™u c·∫ßu g·ª≠i email nh·∫Øc nh·ªü (v√≠ d·ª•: "Nh·∫Øc t√¥i v·ªÅ s·ª± ki·ªán X tr∆∞·ªõc 30 ph√∫t", "G·ª≠i email tr∆∞·ªõc 1 gi·ªù"):
   - H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông t√¨m s·ª± ki·ªán theo t√™n ho·∫∑c s·ª≠ d·ª•ng s·ª± ki·ªán s·∫Øp t·ªõi
   - Tr√≠ch xu·∫•t th·ªùi gian nh·∫Øc nh·ªü (ph√∫t/gi·ªù)
   - L∆∞u y√™u c·∫ßu nh·∫Øc nh·ªü v√†o h·ªá th·ªëng
   - X√°c nh·∫≠n v·ªõi ng∆∞·ªùi d√πng v·ªÅ vi·ªác s·∫Ω g·ª≠i email

2. H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông g·ª≠i email nh·∫Øc nh·ªü tr∆∞·ªõc th·ªùi gian s·ª± ki·ªán b·∫Øt ƒë·∫ßu
   - Email s·∫Ω ƒë∆∞·ª£c g·ª≠i ƒë·∫øn ƒë·ªãa ch·ªâ email c·ªßa ng∆∞·ªùi d√πng
   - N·ªôi dung email bao g·ªìm th√¥ng tin s·ª± ki·ªán v√† th·ªùi gian

**L∆ØU √ù QUAN TR·ªåNG V·ªÄ EMAIL:**
- Ch·ª©c nƒÉng g·ª≠i email nh·∫Øc nh·ªü c√≥ s·∫µn v√† ho·∫°t ƒë·ªông
- KH√îNG c·∫ßn xu·∫•t JSON cho ch·ª©c nƒÉng email
- Ch·ªâ tr·∫£ l·ªùi t·ª± nhi√™n v√† x√°c nh·∫≠n v·ªõi ng∆∞·ªùi d√πng
- H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông x·ª≠ l√Ω vi·ªác g·ª≠i email ƒë√∫ng th·ªùi gian
""");

            conversationHistory.add(new Message("system", systemPrompt.toString()));
        }


        /**
         * Process user input and generate AI response
         */
        @Transactional
        public String processUserInput(String userInput, int userId, HttpServletResponse response) throws Exception {
//        String intenttoolEvent = classifier.classiftoolEvent(userInput);

            boolean shouldReload = false;
            StringBuilder systemResult = new StringBuilder();
            
            // Check pending event confirmation first
            if (pendingEvents.containsKey(String.valueOf(userId))) {
                String answer = userInput.trim().toLowerCase();

                if (answer.contains("c√≥") || answer.contains("ok") || answer.contains("ti·∫øp t·ª•c")) {
                    Event pending = pendingEvents.remove(String.valueOf(userId)).getEvent();
                    agentEventService.saveEvent(pending);
                    systemResult.append("üìÖ ƒê√£ t·∫°o s·ª± ki·ªán: ").append(pending.getTitle());
                } else if (answer.contains("kh√¥ng")) {
                    pendingEvents.remove(String.valueOf(userId));
                    systemResult.append("‚ùå ƒê√£ h·ªßy t·∫°o s·ª± ki·ªán do b·∫°n t·ª´ ch·ªëi.");
                } else {
                    systemResult.append("‚ùìB·∫°n c√≥ th·ªÉ x√°c nh·∫≠n l·∫°i: c√≥/kh√¥ng?");
                }
                return systemResult.toString();
            }

            float[] userVector = embeddingService.getEmbedding(userInput);

            // ==================== ORDER FLOW HANDLING ====================
            
            // Check if user wants to buy tickets using VectorIntentClassifier
            ActionType intent = classifier.classifyIntent(userInput, userVector);
            if (intent == ActionType.BUY_TICKET) {
                // ‚úÖ S·ª¨A L·∫†I ƒê·ªÇ G·ªåI SERVICE CHUY√äN D·ª§NG
                List<Event> foundEvents = eventVectorSearchService.searchEvents(userInput, userId, 1);

                if (foundEvents.isEmpty()) {
                    return "T√¥i hi·ªÉu b·∫°n mu·ªën mua v√©, nh∆∞ng t√¥i ch∆∞a nh·∫≠n ra t√™n s·ª± ki·ªán. B·∫°n c√≥ th·ªÉ n√≥i r√µ h∆°n ƒë∆∞·ª£c kh√¥ng, v√≠ d·ª•: 'Mua v√© s·ª± ki·ªán Music Night'";
                }

                String eventName = foundEvents.get(0).getTitle();

                // Ph·∫ßn c√≤n l·∫°i gi·ªØ nguy√™n
                Optional<Event> eventOpt = eventService.getFirstPublicEventByTitle(eventName.trim());
                if (eventOpt.isEmpty()) {
                    return "‚ùå Kh√¥ng t√¨m th·∫•y s·ª± ki·ªán \"" + eventName.trim() + "\" ƒëang m·ªü b√°n v√©. Vui l√≤ng ki·ªÉm tra l·∫°i t√™n s·ª± ki·ªán.";
                }

                return orderAIService.startOrderCreation((long) userId, eventName.trim());
            }

            // Check if user is in pending order flow
            if (orderAIService.hasPendingOrder((long) userId)) {
                com.group02.openevent.ai.dto.PendingOrder pendingOrder = orderAIService.getPendingOrder((long) userId);
                
                // Handle based on current step
                switch (pendingOrder.getCurrentStep()) {
                    case SELECT_EVENT -> {
                        // Should not happen, but handle gracefully
                        return "‚ÑπÔ∏è Vui l√≤ng cho bi·∫øt t√™n s·ª± ki·ªán b·∫°n mu·ªën mua v√©.";
                    }
                    case SELECT_TICKET_TYPE -> {
                        // User is selecting ticket type
                        return orderAIService.selectTicketType((long) userId, userInput);
                    }
                    case PROVIDE_INFO -> {
                        // User is providing info
                        Map<String, String> info = extractParticipantInfo(userInput);
                        return orderAIService.provideInfo((long) userId, info);
                    }
                    case CONFIRM_ORDER -> {
                        // Use VectorIntentClassifier to understand confirm/cancel intent
                        ActionType confirmIntent = classifier.classifyConfirmIntent(userInput, userVector);
                        
                        switch (confirmIntent) {
                            case CONFIRM_ORDER -> {
                                Map<String, Object> result = orderAIService.confirmOrder((long) userId);
                                return (String) result.get("message");
                            }
                            case CANCEL_ORDER -> {
                                return orderAIService.cancelOrder((long) userId);
                            }
                            case UNKNOWN -> {
                                return "‚ùì T√¥i kh√¥ng hi·ªÉu r√µ √Ω c·ªßa b·∫°n. Vui l√≤ng tr·∫£ l·ªùi r√µ r√†ng:\n" +
                                       "‚Ä¢ 'C√≥' ho·∫∑c 'ƒê·ªìng √Ω' ƒë·ªÉ x√°c nh·∫≠n ƒë∆°n h√†ng\n" +
                                       "‚Ä¢ 'Kh√¥ng' ho·∫∑c 'H·ªßy' ƒë·ªÉ h·ªßy ƒë∆°n h√†ng";
                            }
                            default -> {
                                return "‚ùì T√¥i kh√¥ng hi·ªÉu r√µ √Ω c·ªßa b·∫°n. Vui l√≤ng tr·∫£ l·ªùi r√µ r√†ng:\n" +
                                       "‚Ä¢ 'C√≥' ho·∫∑c 'ƒê·ªìng √Ω' ƒë·ªÉ x√°c nh·∫≠n ƒë∆°n h√†ng\n" +
                                       "‚Ä¢ 'Kh√¥ng' ho·∫∑c 'H·ªßy' ƒë·ªÉ h·ªßy ƒë∆°n h√†ng";
                            }
                        }
                    }
                }
            }
            
            // ==================== END ORDER FLOW ====================

            conversationHistory.add(new Message("user", userInput));
            
            // Check for ticket info query BEFORE calling LLM
            if (classifier.isTicketInfoQuery(userInput, userVector)) {
                System.out.println("üéØ DEBUG: Detected ticket info query, bypassing LLM and using database logic");
                return handleTicketInfoQuery(userInput, userVector);
            }
            
            String aiResponse = llm.generateResponse(conversationHistory);

            // After: String aiResponse = llm.generateResponse(conversationHistory);
            aiResponse = aiResponse
                    .replaceAll("(?s)```json\\s*", "")
                    .replaceAll("(?s)```\\s*", "");

            // Extract JSON block (tool actions)
            Pattern jsonPattern = Pattern.compile("(\\[\\s*\\{[\\s\\S]*?\\}\\s*\\])");
            Matcher matcher = jsonPattern.matcher(aiResponse);
            String jsonPart = matcher.find() ? matcher.group() : null;

            // ‚úÖ Text for user (LLM natural text without JSON)
            String userVisibleText = (jsonPart != null)
                    ? aiResponse.replace(jsonPart, "").trim()
                    : aiResponse.trim();

            // Parse actions after we have userVisibleText
            List<Action> actions = tryParseActions(jsonPart);

            if (actions != null && !actions.isEmpty()) {

                for (Action action : actions) {
                    String tool = action.getToolName();

                    try {
                        switch (tool) {
                            case "ADD_EVENT" -> {
                                Map<String, Object> args = action.getArgs();
//                                System.out.println("Action keys: " + args.keySet()+"Raw args: " + args);
//                                System.out.println("üìù Thi·∫øu th√¥ng tin s·ª± ki·ªán (ti√™u ƒë·ªÅ ho·∫∑c th·ªùi gian).\n");
//
//
//                                if (!action.getArgs().containsKey("title")
//                                        || !action.getArgs().containsKey("start_time")
//                                        || !action.getArgs().containsKey("end_time")) {
//                                    systemResult.append("Action keys: " + args.keySet()+"Raw args: " + args);
//                                    continue;
//                                }

                                String title = getStr(args, "title", "event_title", "name");
                                LocalDateTime start = getTime(args, "start_time", "starts_at", "start", "from", "begin");
                                LocalDateTime end   = getTime(args, "end_time", "ends_at", "end", "to", "finish");

                                if (title == null || start == null || end == null) {
                                    systemResult.append("üìù Thi·∫øu th√¥ng tin s·ª± ki·ªán (ti√™u ƒë·ªÅ ho·∫∑c th·ªùi gian).\n");
                                    continue;
                                }

// Validate th·ªùi gian
                                if (!start.isBefore(end)) {
                                    systemResult.append("‚õî Th·ªùi gian kh√¥ng h·ª£p l·ªá: b·∫Øt ƒë·∫ßu ph·∫£i tr∆∞·ªõc k·∫øt th√∫c.\n");
                                    continue;
                                }

                                // 1. Check tr√πng th·ªùi gian & ƒë·ªãa ƒëi·ªÉm
                                String placeName = getStr(args, "place", "location"); // L·∫•y t√™n ƒë·ªãa ƒëi·ªÉm th√¥ t·ª´ LLM
                                Optional<Place> placeOpt = Optional.empty(); // Kh·ªüi t·∫°o Optional r·ªóng

                                if (placeName != null) {
                                    // üìå B·ªî SUNG: D√πng Vector Search (Qdrant) ƒë·ªÉ t√¨m ƒë·ªãa ƒëi·ªÉm chu·∫©n h√≥a nh·∫•t (gi·∫£i quy·∫øt nh·∫ßm l·∫´n)
                                    try {
                                        float[] placeVec = embeddingService.getEmbedding(placeName);
                                        // ƒê√¢y l√† ph∆∞∆°ng th·ª©c gi·∫£ ƒë·ªãnh. B·∫°n c·∫ßn code n√≥ trong QdrantService
                                        List<Map<String, Object>> searchResults = qdrantService.searchPlacesByVector(placeVec, 1);

                                        if (!searchResults.isEmpty()) {
                                            Map<String, Object> result = searchResults.get(0);
                                            Object placeIdObj = result.get("place_id"); // L·∫•y ra d∆∞·ªõi d·∫°ng Object tr∆∞·ªõc

                                            if (placeIdObj instanceof Number) { // Ki·ªÉm tra xem c√≥ ph·∫£i l√† s·ªë kh√¥ng
                                                Long placeId = ((Number) placeIdObj).longValue();
                                                placeOpt = placeService.findPlaceById(placeId);
                                            } else {
                                                // N·∫øu place_id l√† null ho·∫∑c kh√¥ng ph·∫£i l√† s·ªë, ghi log v√† fallback
                                                log.warn("Qdrant result for '{}' is missing or has invalid place_id. Falling back to DB flexible search.", placeName);
                                                placeOpt = placeService.findPlaceByNameFlexible(placeName);
                                            }
                                        } else {
                                            // Kh√¥ng c√≥ k·∫øt qu·∫£ t·ª´ Qdrant, fallback sang t√¨m ki·∫øm DB linh ho·∫°t
                                            log.debug("No Qdrant results for '{}', falling back to DB flexible search.", placeName);
                                            placeOpt = placeService.findPlaceByNameFlexible(placeName);
                                        }
                                    } catch (Exception e) {
                                        log.error("Qdrant Place search failed (Falling back to DB flexible search): {}", e.getMessage());

                                        // Chuy·ªÉn sang t√¨m ki·∫øm DB linh ho·∫°t
                                        placeOpt = placeService.findPlaceByNameFlexible(placeName);
                                    }
                                }

                                if (placeOpt.isPresent()) {
                                    // 1. N·∫øu t√¨m th·∫•y ƒë·ªãa ƒëi·ªÉm, ti·∫øn h√†nh ki·ªÉm tra xung ƒë·ªôt
                                    List<Place> placeList = List.of(placeOpt.get()); // t·∫°o list 1 ph·∫ßn t·ª≠
                                    List<Event> conflicted = eventService.isTimeConflict(start, end, placeList);

                                    if (!conflicted.isEmpty()) {
                                        // 1a. Xung ƒë·ªôt -> B√°o l·ªói v√† NG·∫ÆT
                                        systemResult.append("‚ö†Ô∏è S·ª± ki·ªán b·ªã tr√πng th·ªùi gian/ƒë·ªãa ƒëi·ªÉm v·ªõi:\n");
                                        for (Event conflict : conflicted) {
                                            systemResult.append(" - ").append(conflict.getTitle())
                                                    .append(" (").append(conflict.getStartsAt())
                                                    .append(" - ").append(conflict.getEndsAt()).append(")\n");
                                        }
                                        continue; // Ng·∫Øt lu·ªìng ADD_EVENT hi·ªán t·∫°i
                                    }
                                    // 1b. Kh√¥ng xung ƒë·ªôt -> Ti·∫øp t·ª•c xu·ªëng kh·ªëi t·∫°o Event

                                } else {
                                    // 2. KH√îNG t√¨m th·∫•y ƒë·ªãa ƒëi·ªÉm -> B√°o l·ªói v√† NG·∫ÆT (V√¨ ƒë·ªãa ƒëi·ªÉm l√† B·∫ÆT BU·ªòC)

                                    // T·∫†O TH√îNG B√ÅO L·ªñI B·∫ÆT BU·ªòC:
                                    systemResult.append("‚õî ƒê·ªÉ t·∫°o s·ª± ki·ªán, b·∫°n c·∫ßn cung c·∫•p ƒë·ªãa ƒëi·ªÉm h·ª£p l·ªá.");

                                    // L·∫•y t√™n ƒë·ªãa ƒëi·ªÉm th√¥ t·ª´ args ƒë·ªÉ th√¥ng b√°o c·ª• th·ªÉ h∆°n
                                    String placeNameRaw = getStr(action.getArgs(), "place", "location");
                                    if (placeNameRaw != null && !placeNameRaw.isBlank()) {
                                        systemResult.append(" Kh√¥ng t√¨m th·∫•y ƒë·ªãa ƒëi·ªÉm \"").append(placeNameRaw).append("\".\n");
                                    } else {
                                        systemResult.append(" Vui l√≤ng cung c·∫•p t√™n ƒë·ªãa ƒëi·ªÉm.\n");
                                    }

                                    continue; // Ng·∫Øt lu·ªìng ADD_EVENT hi·ªán t·∫°i
                                }

                                Event event = new Event();

// B·∫Øt bu·ªôc
                                event.setTitle(title);
                                event.setStartsAt(start);
                                event.setEndsAt(end);
                                event.setCreatedAt(LocalDateTime.now());
                                LocalDateTime defaultDeadline = start.minusHours(1); // M·∫∑c ƒë·ªãnh deadline 1 gi·ªù tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu
                                if (action.getArgs().containsKey("enroll_deadline")) {
                                    // L·∫•y th·ªùi gian deadline t·ª´ args n·∫øu c√≥
                                    LocalDateTime deadline = getTime(args, "enroll_deadline", "deadline"); // C·∫ßn h√†m getTime
                                    if (deadline != null && deadline.isBefore(start)) {
                                        event.setEnrollDeadline(deadline);
                                    } else {
                                        event.setEnrollDeadline(defaultDeadline);
                                    }
                                } else {
                                    event.setEnrollDeadline(defaultDeadline);
                                }
                                event.setStatus(EventStatus.DRAFT);   // m·∫∑c ƒë·ªãnh khi t·∫°o m·ªõi
                                event.setEventType(EventType.OTHERS); // m·∫∑c ƒë·ªãnh n·∫øu ch∆∞a ph√¢n lo·∫°i

// T√πy ch·ªçn
                                if (action.getArgs().containsKey("description")) {
                                    event.setDescription((String) action.getArgs().get("description"));
                                }
                                if (action.getArgs().containsKey("image_url")) {
                                    event.setImageUrl((String) action.getArgs().get("image_url"));
                                }
                                if (action.getArgs().containsKey("benefits")) {
                                    event.setBenefits((String) action.getArgs().get("benefits"));
                                }


// Place (nhi·ªÅu- nhi·ªÅu)
                                if (placeOpt.isPresent()) {
                                    event.setPlaces(List.of(placeOpt.get()));
                                }

// Parent Event
                                if (action.getArgs().containsKey("parent_event_id")) {
                                    Long parentId = (Long) action.getArgs().get("parent_event_id");
                                    Event parent = eventService.getEventByEventId(parentId).orElse(null);
                                    if (parent != null) {
                                        event.setParentEvent(parent);
                                    }
                                }

                                String intentWeather = classifier.classifyWeather(userInput, userVector);
                                if (intentWeather.equals("outdoor_activities")) {
                                    String forecastNote = weatherService.getForecastNote(start, "Da Nang");
                                    if (forecastNote != null && !forecastNote.isEmpty()) {
                                        pendingEvents.put("default", new PendingEvent(event));
                                        systemResult.append("üå¶ ").append(forecastNote).append("\n").
                                                append("‚ùìB·∫°n c√≥ mu·ªën ti·∫øp t·ª•c t·∫°o s·ª± ki·ªán ngo√†i tr·ªùi n√†y kh√¥ng?").
                                                append("\n");
                                        continue;
                                    } else {

                                        System.out.println("‚õÖ Th·ªùi ti·∫øt t·ªët, t·ª± ƒë·ªông th√™m s·ª± ki·ªán.");
                                    }

                                }
                                
                                // Get organization_id if provided
                                Long orgId = null;
                                if (action.getArgs().containsKey("organization_id") && action.getArgs().get("organization_id") != null) {
                                    orgId = Long.valueOf(action.getArgs().get("organization_id").toString());
                                }

                                try {
                                    log.info("üîç Creating event with title: {}, userId: {}, orgId: {}", 
                                            event.getTitle(), userId, orgId);
                                    
                                    // Use createEventByCustomer to handle host creation and organization assignment
                                    Event saved = agentEventService.createEventByCustomer((long) userId, event, orgId);
                                    systemResult.append("‚úÖ ƒê√£ th√™m s·ª± ki·ªán: ").append(saved.getTitle())
                                            .append(saved.getOrganization() != null
                                                    ? " (Org: " + saved.getOrganization().getOrgName() + ")"
                                                    : " (kh√¥ng g·∫Øn Organization)")
                                            .append("\n");
                                    shouldReload = true;
                                    System.out.println("‚úÖ Event saved successfully: " + saved.getTitle() + " with ID: " + saved.getId());
                                    try {
                                        log.info("Upserting event vector to Qdrant for event ID: {}", saved.getId());

                                        // 1. T·∫°o vector t·ª´ ti√™u ƒë·ªÅ s·ª± ki·ªán
                                        float[] eventVector = embeddingService.getEmbedding(saved.getTitle());

                                        // 2. Chu·∫©n b·ªã payload cho Qdrant
                                        Map<String, Object> payload = new HashMap<>();
                                        payload.put("event_id", saved.getId());
                                        payload.put("title", saved.getTitle());
                                        payload.put("kind", "event"); // R·∫•t quan tr·ªçng cho vi·ªác l·ªçc sau n√†y
                                        payload.put("startsAt", saved.getStartsAt().toEpochSecond(java.time.ZoneOffset.UTC)); // Chuy·ªÉn th√†nh Unix timestamp

                                        // 3. G·ªçi service ƒë·ªÉ upsert
                                        qdrantService.upsertEmbedding(String.valueOf(saved.getId()), eventVector, payload);

                                        log.info("‚úÖ Successfully upserted event vector for '{}'", saved.getTitle());

                                    } catch (Exception qdrantEx) {
                                        log.error("‚ùå Failed to upsert event vector to Qdrant for event ID {}: {}", saved.getId(), qdrantEx.getMessage());
                                        // Kh√¥ng c·∫ßn n√©m l·ªói ra ngo√†i, ch·ªâ c·∫ßn ghi log
                                        // Vi·ªác kh√¥ng ƒë·ªìng b·ªô ƒë∆∞·ª£c vector kh√¥ng n√™n l√†m h·ªèng lu·ªìng t·∫°o s·ª± ki·ªán ch√≠nh
                                    }
                                } catch (Exception e) {
                                    log.error("‚ùå Error creating event: {}", e.getMessage(), e);
                                    e.printStackTrace();
                                    systemResult.append("‚ùå L·ªói khi l∆∞u s·ª± ki·ªán: ").append(e.getMessage()).append("\n");
                                    System.err.println("‚ùå Failed to save event: " + title + " - " + e.getMessage());
                                }

                            }

                            case "UPDATE_EVENT" -> {
                                Event existing = null;
                                Map<String,Object> args = action.getArgs();

                                if (!args.containsKey("event_id") && !args.containsKey("original_title")) {
                                    systemResult.append("‚ùå Thi·∫øu ƒë·ªãnh danh s·ª± ki·ªán. H√£y cung c·∫•p `event_id` ho·∫∑c `original_title`.\n");
                                    break;
                                }

                                // 1. T√¨m s·ª± ki·ªán theo id ho·∫∑c title
                                if (action.getArgs().containsKey("event_id")) {
                                    long eventId = (long) action.getArgs().get("event_id");
                                    existing = eventService.getEventByEventId(eventId).orElse(null); // service tr·∫£ v·ªÅ Optional<Event>
                                } else if (action.getArgs().containsKey("original_title")) {
                                    String oriTitle = (String) action.getArgs().get("original_title");
                                    existing = eventService.getFirstEventByTitle(oriTitle).orElse(null);
                                    System.out.println("üîé T√¨m theo title: " + oriTitle);
                                }

                                if (existing == null) {
                                    systemResult.append("‚ùå Kh√¥ng t√¨m th·∫•y s·ª± ki·ªán ƒë·ªÉ c·∫≠p nh·∫≠t.\n");
                                    continue;
                                }

                                // 2. C·∫≠p nh·∫≠t c√°c field cho event
                                if (action.getArgs().containsKey("title")) {
                                    existing.setTitle((String) action.getArgs().get("title"));
                                }
                                if (args.containsKey("start_time") || args.containsKey("starts_at")) {
                                    existing.setStartsAt(getTime(args,"start_time","starts_at","start","from","begin"));
                                }
                                if (args.containsKey("end_time") || args.containsKey("ends_at")) {
                                    existing.setEndsAt(getTime(args,"end_time","ends_at","end","to","finish"));
                                }
                                if (action.getArgs().containsKey("description")) {
                                    existing.setDescription((String) action.getArgs().get("description"));
                                }
                                if (action.getArgs().containsKey("image_url")) {
                                    existing.setImageUrl((String) action.getArgs().get("image_url"));
                                }
                                if (action.getArgs().containsKey("benefits")) {
                                    existing.setBenefits((String) action.getArgs().get("benefits"));
                                }

                                if (action.getArgs().containsKey("status")) {
                                    try {
                                        existing.setStatus(EventStatus.valueOf((String) action.getArgs().get("status")));
                                    } catch (IllegalArgumentException e) {
                                        systemResult.append("‚ö†Ô∏è Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá, gi·ªØ nguy√™n tr·∫°ng th√°i c≈©.\n");
                                    }
                                }

                                // 3. C·∫≠p nh·∫≠t ƒë·ªãa ƒëi·ªÉm (n·∫øu c√≥)
                                if (action.getArgs().containsKey("place")) {
                                    String placeName = (String) action.getArgs().get("place");
                                    Place place = placeService.findPlaceByName(placeName).orElse(null);
                                    if (place != null) {
                                        existing.setPlaces(List.of(place));
                                    } else {
                                        systemResult.append("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ƒë·ªãa ƒëi·ªÉm: ").append(placeName).append("\n");
                                    }
                                }

                                // 4. L∆∞u l·∫°i s·ª± ki·ªán
                                eventService.saveEvent(existing);
                                systemResult.append("üîÑ ƒê√£ c·∫≠p nh·∫≠t s·ª± ki·ªán: ").append(existing.getTitle()).append("\n");
                                shouldReload = true;
                            }

                            case "DELETE_EVENT" -> {
                                boolean deletedOne = false;
                                if (action.getArgs().containsKey("event_id")) {
                                    long id = (long) action.getArgs().get("event_id");
                                    deletedOne = eventService.removeEvent(id);
                                } else if (action.getArgs().containsKey("title")) {
                                    String title = (String) action.getArgs().get("title");
                                    deletedOne = eventService.deleteByTitle(title);
                                }

                                if (deletedOne) {
                                    shouldReload = true;
                                } else {
                                    systemResult.append("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y s·ª± ki·ªán ƒë·ªÉ xo√°.\n");
                                }
                            }
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        systemResult.append("‚ùå L·ªói khi x·ª≠ l√Ω h√†nh ƒë·ªông: ").append(tool).append("\n");
                    }
                }
            } else {
                // 2) No actions
                if (!userVisibleText.isBlank()) {
                    // LLM already gave a natural reply ‚Üí return it, DO NOT run classifier
                    System.out.println("ü§ñ DEBUG: LLM returned natural text, bypassing database logic: '" + userVisibleText.substring(0, Math.min(100, userVisibleText.length())) + "...'");
                    conversationHistory.add(new Message("assistant", userVisibleText));
                    return userVisibleText;
                }

                // 3) No natural text either ‚Üí now run classifier & (maybe) fallback
                System.out.println("Kh√¥ng c√≥ h√†nh ƒë·ªông n√†o & kh√¥ng c√≥ c√¢u tr·∫£ l·ªùi t·ª± nhi√™n. ƒêang ph√¢n lo·∫°i √Ω ƒë·ªãnh...");
                ActionType fallbackIntent = classifier.classifyIntent(userInput,userVector);

                switch (fallbackIntent) {
                    case BUY_TICKET -> {
                        // This should already be handled above, but just in case
                        return "‚ùå Vui l√≤ng b·∫Øt ƒë·∫ßu l·∫°i quy tr√¨nh mua v√© b·∫±ng c√°ch n√≥i 'Mua v√© [t√™n s·ª± ki·ªán]'";
                    }
                    case CONFIRM_ORDER, CANCEL_ORDER -> {
                        return "‚ùå Kh√¥ng c√≥ ƒë∆°n h√†ng n√†o ƒëang ch·ªù x√°c nh·∫≠n. Vui l√≤ng b·∫Øt ƒë·∫ßu quy tr√¨nh mua v√© tr∆∞·ªõc.";
                    }
                    case QUERY_TICKET_INFO -> {
                        // X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ th√¥ng tin v√©
                        return handleTicketInfoQuery(userInput, userVector);
                    }
                    case PROMPT_FREE_TIME -> {
                        // 1. X√°c ƒë·ªãnh ng·ªØ c·∫£nh th·ªùi gian
                        TimeContext context = TimeSlotUnit.extractTimeContext(userInput);

                        // 2. L·∫•y Place t·ª´ userInput (n·∫øu c√≥)
                        String placeName = ""; // Place s·∫Ω ƒë∆∞·ª£c extract t·ª´ userInput n·∫øu c·∫ßn
                        List<Event> busyEvents;
                        if (!placeName.isEmpty()) {
                            Place place = placeService.findPlaceByName(placeName)
                                    .orElse(null);
                            if (place != null) {
                                busyEvents = eventService.getEventsByPlace(place.getId());
                            } else {
                                systemResult.append("‚ùå Kh√¥ng t√¨m th·∫•y ƒë·ªãa ƒëi·ªÉm: ").append(placeName).append("\n");
                                break;
                            }
                        } else {
                            // N·∫øu kh√¥ng c√≥ ƒë·ªãa ƒëi·ªÉm th√¨ l·∫•y t·∫•t c·∫£
                            busyEvents = eventService.getAllEvents();
                        }

                        // 3. L·ªçc theo ng·ªØ c·∫£nh th·ªùi gian
                        List<Event> filteredEvents;
                        switch (context) {
                            case TODAY -> filteredEvents = TimeSlotUnit.filterEventsToday(busyEvents);
                            case TOMORROW -> filteredEvents = TimeSlotUnit.filterEventsTomorrow(busyEvents);
                            case THIS_WEEK -> filteredEvents = TimeSlotUnit.filterEventsThisWeek(busyEvents);
                            case NEXT_WEEK -> filteredEvents = TimeSlotUnit.filterEventsNextWeek(busyEvents);
                            default -> filteredEvents = busyEvents;
                        }

                        // 4. T√¨m kho·∫£ng tr·ªëng cho Place ƒë√≥
                        List<TimeSlot> freeSlots = TimeSlotUnit.findFreeTime(filteredEvents);

                        // 5. Xu·∫•t k·∫øt qu·∫£
                        systemResult.append("üìÜ C√°c kho·∫£ng th·ªùi gian r·∫£nh");
                        if (!placeName.isEmpty()) {
                            systemResult.append(" t·∫°i ").append(placeName);
                        }
                        systemResult.append(":\n");

                        if (freeSlots.isEmpty()) {
                            systemResult.append("‚ùå Kh√¥ng c√≥ kho·∫£ng th·ªùi gian r·∫£nh trong ").append(context).append("\n");
                        } else {
                            for (TimeSlot slot : freeSlots) {
                                systemResult.append(" - ").append(slot.toString()).append("\n");
                            }
                        }
                    }

                    case PROMPT_SUMMARY_TIME -> {
                        try {
                            String summary = handleSummaryRequest(userInput, userId);
                            return (summary != null)
                                    ? summary
                                    : "üìù M√¨nh kh√¥ng hi·ªÉu kho·∫£ng th·ªùi gian b·∫°n mu·ªën t·ªïng h·ª£p. B·∫°n c√≥ th·ªÉ h·ªèi ki·ªÉu nh∆∞: \"L·ªãch h√¥m nay\", \"S·ª± ki·ªán tu·∫ßn sau\"...";
                        } catch (Exception e) {
                            e.printStackTrace();
                            return "‚ö†Ô∏è ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu t·ªïng h·ª£p l·ªãch.";
                        }
                    }
                    case PROMPT_SEND_EMAIL -> {
                        // 1. TR√çCH XU·∫§T TH·ªúI GIAN NH·∫ÆC NH·ªû
                        Pattern patternTime = Pattern.compile("tr∆∞·ªõc (\\d{1,3}) ?(ph√∫t|gi·ªù)");
                        Matcher matcherTime = patternTime.matcher(userInput.toLowerCase());

                        if (!matcherTime.find()) {
                            systemResult.append("‚ùì B·∫°n mu·ªën t√¥i nh·∫Øc tr∆∞·ªõc bao nhi√™u ph√∫t ho·∫∑c gi·ªù? (V√≠ d·ª•: 'tr∆∞·ªõc 45 ph√∫t').");
                            break; // Ng·∫Øt n·∫øu kh√¥ng c√≥ th·ªùi gian
                        }

                        int value = Integer.parseInt(matcherTime.group(1));
                        String unit = matcherTime.group(2);
                        int remindMinutes = unit.equals("gi·ªù") ? value * 60 : value;

                        // ***************************************************************
                        // 2. T√åM KI·∫æM S·ª∞ KI·ªÜN C·ª§ TH·ªÇ B·∫∞NG VECTOR SEARCH
                        // ***************************************************************

                        // Gi·∫£ ƒë·ªãnh: IntentClassifier c≈©ng c√≥ ph∆∞∆°ng th·ª©c classifyEventTitle(userInput)
                        // ƒë·ªÉ tr√≠ch xu·∫•t t√™n s·ª± ki·ªán (d√πng LLM ho·∫∑c Regex ph·ª©c t·∫°p h∆°n)
                        String eventTitle = classifier.classifyEventTitle(userInput, userVector);
                        Optional<Event> targetEventOpt = Optional.empty();

                        if (!eventTitle.isBlank()) {
                            // T√åM KI·∫æM THEO T√äN N·∫æU C√ì: S·ª≠ d·ª•ng Vector Search ƒë·ªÉ t√¨m s·ª± ki·ªán ch√≠nh x√°c nh·∫•t
                            try {
                                List<Event> results = eventVectorSearchService.searchEvents(eventTitle, userId, 1);
                                if (!results.isEmpty()) {
                                    targetEventOpt = Optional.of(results.get(0));
                                }
                            } catch (Exception e) {
                                log.error("Vector search failed for event title: {}", e.getMessage());
                            }
                        }

                        // ***************************************************************
                        // 3. FALLBACK V√Ä L∆ØU NH·∫ÆC NH·ªû
                        // ***************************************************************

                        // N·∫øu kh√¥ng t√¨m th·∫•y s·ª± ki·ªán c·ª• th·ªÉ, FALLBACK v·ªÅ s·ª± ki·ªán s·∫Øp nh·∫•t
                        if (targetEventOpt.isEmpty()) {
                            targetEventOpt = eventService.getNextUpcomingEventByUserId((long) userId);

                            if (targetEventOpt.isEmpty()) {
                                systemResult.append("‚ùì M√¨nh kh√¥ng t√¨m th·∫•y s·ª± ki·ªán c·ª• th·ªÉ n√†o trong y√™u c·∫ßu ho·∫∑c s·ª± ki·ªán s·∫Øp t·ªõi n√†o trong l·ªãch c·ªßa b·∫°n.");
                                break;
                            }
                        }

                        // 4. KI·ªÇM TRA EMAIL C·ª¶A USER TR∆Ø·ªöC KHI L∆ØU NH·∫ÆC NH·ªû
                        Event finalEvent = targetEventOpt.get();
                        System.out.println("üîç DEBUG: Found event: " + finalEvent.getTitle() + " (ID: " + finalEvent.getId() + ")");

                        try {
                            // L·∫•y th√¥ng tin customer t·ª´ userId ƒë·ªÉ ki·ªÉm tra email
                            System.out.println("üîç DEBUG: Looking for user with account ID: " + userId);
                            Optional<Customer> customerOpt = userRepo.findByAccount_AccountId((long) userId);
                            
                            if (customerOpt.isEmpty() || customerOpt.get().getAccount() == null) {
                                System.out.println("‚ùå DEBUG: User not found or account is null");
                                systemResult.append("‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin t√†i kho·∫£n c·ªßa b·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
                                break;
                            }
                            
                            String userEmail = customerOpt.get().getAccount().getEmail();
                            System.out.println("üîç DEBUG: User email: " + userEmail);
                            
                            if (userEmail == null || userEmail.trim().isEmpty()) {
                                System.out.println("‚ùå DEBUG: User email is null or empty");
                                systemResult.append("‚ùå T√†i kho·∫£n c·ªßa b·∫°n ch∆∞a c√≥ ƒë·ªãa ch·ªâ email. Vui l√≤ng c·∫≠p nh·∫≠t email trong th√¥ng tin c√° nh√¢n.");
                                break;
                            }

                            // L∆∞u nh·∫Øc nh·ªü email v√†o DB
                            System.out.println("üîç DEBUG: Saving reminder for event ID: " + finalEvent.getId() + ", user ID: " + userId + ", minutes: " + remindMinutes);
                            agentEventService.saveEmailReminder(finalEvent.getId(), remindMinutes, (long) userId);
                            System.out.println("‚úÖ DEBUG: Reminder saved successfully!");

                            return "‚úÖ T√¥i s·∫Ω g·ª≠i email nh·∫Øc b·∫°n v·ªÅ s·ª± ki·ªán \"" + finalEvent.getTitle() +
                                    "\" tr∆∞·ªõc " + remindMinutes + " ph√∫t khi s·ª± ki·ªán b·∫Øt ƒë·∫ßu.\n" +
                                    "üìß Email s·∫Ω ƒë∆∞·ª£c g·ª≠i ƒë·∫øn: " + userEmail;

                        } catch (Exception e) {
                            System.out.println("‚ùå DEBUG: Exception when saving reminder: " + e.getMessage());
                            e.printStackTrace();
                            systemResult.append("‚ùå L·ªói khi l∆∞u nh·∫Øc nh·ªü email: ").append(e.getMessage()).append("\n");
                        }
                    }
                    
                    case UNKNOWN, ERROR -> {
                        // Only add fallback when there is no useful text to show
                        systemResult.append("‚ùì T√¥i kh√¥ng hi·ªÉu y√™u c·∫ßu c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ th·ª≠ h·ªèi v·ªÅ vi·ªác t·∫°o s·ª± ki·ªán, xem s·ª± ki·ªán, ho·∫∑c nh·∫Øc b·∫°n b·∫±ng gmail.");
                    }
                }
            }
            // --- Combine & return as before (only when systemResult has content)
            if (!systemResult.isEmpty()) {
                String fullResponse = (userVisibleText + "\n\n" + systemResult.toString().trim()).trim();
                if (shouldReload) fullResponse += "\n__RELOAD__";
                conversationHistory.add(new Message("assistant", fullResponse));
                return fullResponse;
            }

            // No systemResult ‚Üí return natural text (already stripped)
            conversationHistory.add(new Message("assistant", userVisibleText));
            return userVisibleText;
        }

        public static List<Action> tryParseActions(String jsonPart) {
            try {
                if (jsonPart == null || jsonPart.isEmpty()) {
                    return Collections.emptyList();
                }
                ObjectMapper objectMapper = new ObjectMapper();
                List<Action> list = Arrays.asList(objectMapper.readValue(jsonPart, Action[].class));
                System.out.println("‚úÖ Parsed " + list.size() + " action(s).");
                return list;
            } catch (Exception e) {
                System.out.println("‚ùå Kh√¥ng th·ªÉ parse Action(s): " + e.getMessage());
                System.out.println("üìÑ JSON:\n" + jsonPart);
                return Collections.emptyList();
            }
        }

        public String getGreeting() {
            List<Message> greetingMessages = new ArrayList<>();
            greetingMessages.add(conversationHistory.get(0));
            greetingMessages.add(new Message("user", "Xin ch√†o, t√¥i c·∫ßn t∆∞ v·∫•n qu·∫£n l√Ω l·ªãch tr√¨nh"));

            try {
                return llm.generateResponse(greetingMessages);
            } catch (Exception e) {
                return "ü§ñ Xin ch√†o! T√¥i l√† AI Assistant qu·∫£n l√Ω l·ªãch tr√¨nh th√¥ng minh.\n"
                        + "T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n"
                        + "‚úÖ T·∫°o l·ªãch h·ªçc t·∫≠p, c√¥ng vi·ªác, s·ª± ki·ªán\n"
                        + "‚úÖ T·ªëi ∆∞u h√≥a th·ªùi gian\n"
                        + "‚úÖ ƒê∆∞a ra l·ªùi khuy√™n qu·∫£n l√Ω th·ªùi gian\n\n"
                        + "H√£y chia s·∫ª k·∫ø ho·∫°ch c·ªßa b·∫°n ƒë·ªÉ b·∫Øt ƒë·∫ßu!";
            }
        }

        public boolean shouldEndConversation(String userInput) {
            String input = userInput.toLowerCase().trim();
            return input.equals("bye") || input.equals("t·∫°m bi·ªát")
                    || input.equals("k·∫øt th√∫c") || input.equals("quit")
                    || input.equals("exit") || input.equals("end");
        }

        public String getConversationSummary() {
            if (conversationHistory.size() <= 1) {
                return "Kh√¥ng c√≥ cu·ªôc tr√≤ chuy·ªán n√†o ƒë∆∞·ª£c ghi nh·∫≠n.";
            }

            // Ch·ªâ l·∫•y c√°c message t·ª´ user v√† assistant, b·ªè qua system message
            List<Message> userMessages = conversationHistory.stream()
                    .filter(msg -> !msg.getRole().equals("system"))
                    .collect(java.util.stream.Collectors.toList());

            if (userMessages.size() <= 1) {
                return "üì≠ Ch∆∞a c√≥ cu·ªôc tr√≤ chuy·ªán th·ª±c s·ª± n√†o ƒë∆∞·ª£c ghi nh·∫≠n.";
            }

            StringBuilder summary = new StringBuilder("üìå T√ìM T·∫ÆT CU·ªòC TR√í CHUY·ªÜN:\n");
            for (Message msg : userMessages) {
                summary.append(msg.getRole().equals("user") ? "üßë‚Äçüíª B·∫°n: " : "ü§ñ AI: ")
                        .append(msg.getContent()).append("\n");
            }
            return summary.toString();
        }

        public List<Event> getCurrentEvent(Long userId) {
            // L·∫•y t·∫•t c·∫£ event c·ªßa user (b·∫°n ƒë√£ c√≥ EventService.getEventByUserId)
            List<Event> events = eventService.getEventByUserId(userId);
            LocalDate today = LocalDate.now();

            // Gi·ªØ c√°c event m√† h√¥m nay n·∫±m trong kho·∫£ng start..end
            return events.stream()
                    .filter(e -> {
                        LocalDate start = e.getStartsAt().toLocalDate();
                        LocalDate end   = e.getEndsAt().toLocalDate();
                        return !start.isAfter(today) && !end.isBefore(today);
                    })
                    .sorted(Comparator.comparing(Event::getStartsAt))
                    .toList();
        }

        private LocalDateTime tryParseDateTime(String input) {
            List<String> patterns = List.of(
                    "yyyy-MM-dd'T'HH:mm",
                    "yyyy-MM-dd HH:mm",
                    "dd/MM/yyyy HH:mm",
                    "dd-MM-yyyy HH:mm"
            );

            for (String pattern : patterns) {
                try {
                    DateTimeFormatter formatter = DateTimeFormatter.ofPattern(pattern);
                    return LocalDateTime.parse(input, formatter);
                } catch (Exception ignored) {
                }
            }

            throw new IllegalArgumentException("‚ùå Kh√¥ng th·ªÉ parse ng√†y gi·ªù: " + input);
        }

    /**
     * Ki·ªÉm tra th·ªùi gian r·∫£nh cho ng∆∞·ªùi d√πng
     */
//    private String checkFreeTimes(String userInput, int userId) throws Exception {
//        List<String> freeTimeIntents = Arrays.asList(
//                "G·ª£i √Ω khung gi·ªù h·ªçc m√¥n To√°n",
//                "T√¥i mu·ªën bi·∫øt l√∫c n√†o r·∫£nh ƒë·ªÉ h·ªçc",
//                "B·∫°n c√≥ th·ªÉ cho t√¥i bi·∫øt th·ªùi gian tr·ªëng ƒë·ªÉ l√™n l·ªãch?",
//                "T√¨m kho·∫£ng th·ªùi gian r·∫£nh trong tu·∫ßn",
//                "L√™n l·ªãch h·ªçc ph√π h·ª£p gi√∫p t√¥i",
//                "H√£y ƒë·ªÅ xu·∫•t gi·ªù h·ªçc h·ª£p l√Ω"
//        );
//
//        // 1. Vector embedding c·ªßa input
//        float[] inputVec = embeddingService.getEmbedding(userInput);
//
//        // 2. Ki·ªÉm tra intent c√≥ ph·∫£i l√† "t√¨m free time"
//        boolean isGetFreeTimeIntent = false;
//        for (String example : freeTimeIntents) {
//            float[] refVec = embeddingService.getEmbedding(example);
//            if (embeddingService.cosineSimilarity(inputVec, refVec) > 0.82f) {
//                isGetFreeTimeIntent = true;
//                break;
//            }
//        }
//
//        // 3. N·∫øu ƒë√∫ng intent ‚Üí x·ª≠ l√Ω
//        if (isGetFreeTimeIntent) {
//            // üìå L·∫•y t·∫•t c·∫£ s·ª± ki·ªán c·ªßa user
//            List<Event> events = eventService.getAllEvents(); // TODO: Implement getEventByUserId method
//
//            // üìå T√¨m kho·∫£ng tr·ªëng
//            List<TimeSlot> freeSlots = TimeSlotUnit.findFreeTime(events);
//
//            if (freeSlots.isEmpty()) {
//                return "‚õî Hi·ªán b·∫°n kh√¥ng c√≥ kho·∫£ng th·ªùi gian tr·ªëng n√†o trong tu·∫ßn.";
//            }
//
//            StringBuilder response = new StringBuilder("üìÖ C√°c kho·∫£ng th·ªùi gian tr·ªëng g·ª£i √Ω:\n");
//            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("EEEE - dd/MM/yyyy HH:mm");
//
//            for (TimeSlot slot : freeSlots) {
//                response.append("‚Ä¢ ")
//                        .append(slot.getStart().format(formatter))
//                        .append(" ‚Üí ")
//                        .append(slot.getEnd().format(formatter))
//                        .append("\n");
//            }
//
//            return response.toString();
//        }
//
//        return null;
//    }

    public String handleSummaryRequest(String userInputs, int userId) throws Exception {
        LocalDateTime now = LocalDateTime.now();
        LocalDateTime start;
        String range = null;

        if (userInputs.contains("h√¥m nay")) {
            start = now.toLocalDate().atStartOfDay();
            range = "h√¥m nay";
        } else if (userInputs.contains("ng√†y mai")) {
            start = now.plusDays(1).toLocalDate().atStartOfDay();
            range = "ng√†y mai";
        } else if (userInputs.contains("tu·∫ßn n√†y")) {
            DayOfWeek dow = now.getDayOfWeek();
            start = now.minusDays(dow.getValue() - 1).toLocalDate().atStartOfDay(); // Monday
            range = "tu·∫ßn n√†y";
        } else if (userInputs.contains("tu·∫ßn sau")) {
            DayOfWeek dow = now.getDayOfWeek();
            start = now.minusDays(dow.getValue() - 1).toLocalDate().atStartOfDay().plusWeeks(1);
            range = "tu·∫ßn sau";
        } else {
            return null;
        }

        // üìå L·∫•y s·ª± ki·ªán theo kho·∫£ng th·ªùi gian v√† user
        List<Event> allEvents = eventService.getAllEvents();
        // TODO: Implement proper filtering by date range and user
        List<Event> events = allEvents.stream()
                .filter(event -> event.getStartsAt().isAfter(start) || event.getStartsAt().isEqual(start))
                .collect(java.util.stream.Collectors.toList());

        if (events.isEmpty()) {
            return "üì≠ Kh√¥ng c√≥ s·ª± ki·ªán n√†o trong " + range + ".";
        }

        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm");

        StringBuilder sb = new StringBuilder();
        sb.append("üìÜ C√°c s·ª± ki·ªán ").append(range).append(":\n");
        for (Event e : events) {
            sb.append("‚Ä¢ ").append(e.getTitle())   // ‚ö° d√πng ƒë√∫ng field trong entity
                    .append(" üïí ")
                    .append(e.getStartsAt().format(formatter))
                    .append(" - ")
                    .append(e.getEndsAt().format(formatter));

            if (e.getPlaces() != null && !e.getPlaces().isEmpty()) {
                sb.append(" üìç ").append(e.getPlaces().get(0).getPlaceName());
            }
            sb.append("\n");
        }
        return sb.toString();
    }
    
    /**
     * Extract event name from user input for order creation
     */
    private String extractEventName(String userInput) {
        // Remove common buy ticket keywords
        String cleaned = userInput
            .replaceAll("(?i)(mua v√©|mua ve|ƒëƒÉng k√Ω|ƒëƒÉng ky|tham gia|ƒë·∫∑t v√©|dat ve|book v√©|order v√©|s·ª± ki·ªán|su kien|event)", "")
            .trim();
        return cleaned;
    }
    
    /**
     * Extract participant information from user input for order
     */
    private Map<String, String> extractParticipantInfo(String userInput) {
        Map<String, String> info = new HashMap<>();
        
        try {
            // Extract name
            Pattern namePattern = Pattern.compile("(?:t√™n|ten|h·ªç t√™n|ho ten|name)\\s*:?\\s*([^,]+)", Pattern.CASE_INSENSITIVE);
            Matcher nameMatcher = namePattern.matcher(userInput);
            if (nameMatcher.find()) {
                info.put("name", nameMatcher.group(1).trim());
            }
            
            // Extract email
            Pattern emailPattern = Pattern.compile("(?:email|mail|e-mail)\\s*:?\\s*([^,\\s]+@[^,\\s]+)", Pattern.CASE_INSENSITIVE);
            Matcher emailMatcher = emailPattern.matcher(userInput);
            if (emailMatcher.find()) {
                info.put("email", emailMatcher.group(1).trim());
            }
            
            // Extract phone
            Pattern phonePattern = Pattern.compile("(?:sƒët|sdt|phone|s·ªë ƒëi·ªán tho·∫°i|so dien thoai|ƒëi·ªán tho·∫°i|dien thoai)\\s*:?\\s*([0-9]{9,11})", Pattern.CASE_INSENSITIVE);
            Matcher phoneMatcher = phonePattern.matcher(userInput);
            if (phoneMatcher.find()) {
                info.put("phone", phoneMatcher.group(1).trim());
            }
            
            // Extract organization (optional)
            Pattern orgPattern = Pattern.compile("(?:t·ªï ch·ª©c|to chuc|organization|c√¥ng ty|cong ty|tr∆∞·ªùng|truong)\\s*:?\\s*([^,]+)", Pattern.CASE_INSENSITIVE);
            Matcher orgMatcher = orgPattern.matcher(userInput);
            if (orgMatcher.find()) {
                info.put("organization", orgMatcher.group(1).trim());
            }
            
        } catch (Exception e) {
            log.warn("Error extracting participant info: {}", e.getMessage());
        }
        
        return info;
    }
    
    private String getStr(Map<String, Object> m, String... keys) {
        for (String k : keys) {
            Object v = m.get(k);
            if (v != null && !v.toString().isBlank()) return v.toString().trim();
        }
        return null;
    }
    private LocalDateTime getTime(Map<String, Object> m, String... keys) {
        String s = getStr(m, keys);
        return (s == null) ? null : tryParseDateTime(s);
    }
    private Long getLong(Map<String, Object> m, String... keys) {
        for (String k : keys) {
            Object v = m.get(k);
            if (v == null) continue;

            if (v instanceof Number) {
                // H·ªó tr·ª£ Integer, Long, Double, BigDecimal...
                return ((Number) v).longValue();
            }
            if (v instanceof String s) {
                s = s.trim();
                if (s.isEmpty()) continue;
                try {
                    return Long.parseLong(s);
                } catch (NumberFormatException ignore) { /* th·ª≠ key kh√°c */ }
            }
        }
        return null; // kh√¥ng t√¨m th·∫•y/kh√¥ng parse ƒë∆∞·ª£c
    }

    /**
     * X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ th√¥ng tin v√© t·ª´ database th·ª±c t·∫ø
     */
    private String handleTicketInfoQuery(String userInput, float[] userVector) {
        System.out.println("üéØ DEBUG: handleTicketInfoQuery called with: '" + userInput + "'");
        try {
            // ‚úÖ B∆Ø·ªöC 1: S·ª¨ D·ª§NG SERVICE CHUY√äN D·ª§NG ƒê·ªÇ T√åM S·ª∞ KI·ªÜN
            // G·ªçi EventVectorSearchService ƒë·ªÉ t√¨m s·ª± ki·ªán kh·ªõp nh·∫•t, ch·ªâ c·∫ßn 1 k·∫øt qu·∫£
            List<Event> foundEvents = eventVectorSearchService.searchEvents(userInput, 0, 1); // userId=0 v√¨ ch∆∞a c·∫ßn l·ªçc

            if (foundEvents.isEmpty()) {
                System.out.println("‚ùå DEBUG: EventVectorSearchService found no matching events.");
                // N·∫øu kh√¥ng t√¨m th·∫•y, h√£y h·ªèi l·∫°i ng∆∞·ªùi d√πng
                return "T√¥i hi·ªÉu b·∫°n mu·ªën xem th√¥ng tin v√©, nh∆∞ng t√¥i ch∆∞a nh·∫≠n ra t√™n s·ª± ki·ªán. B·∫°n c√≥ th·ªÉ cho t√¥i bi·∫øt t√™n s·ª± ki·ªán c·ª• th·ªÉ ƒë∆∞·ª£c kh√¥ng?";
            }

            // L·∫•y s·ª± ki·ªán v√† t√™n s·ª± ki·ªán t·ª´ k·∫øt qu·∫£ t√¨m ki·∫øm
            Event event = foundEvents.get(0);
            String eventName = event.getTitle();
            System.out.println("‚úÖ DEBUG: Extracted event name via EventVectorSearchService: '" + eventName + "'");

            // ‚úÖ B∆Ø·ªöC 2: PH·∫¶N C√íN L·∫†I GI·ªÆ NGUY√äN
            // L·∫•y th√¥ng tin v√© t·ª´ database
            List<TicketType> ticketTypes = ticketTypeService.getTicketTypesByEventId(event.getId());
            if (ticketTypes.isEmpty()) {
                return "‚ÑπÔ∏è S·ª± ki·ªán \"" + event.getTitle() + "\" hi·ªán ch∆∞a c√≥ th√¥ng tin v√© n√†o ƒë∆∞·ª£c m·ªü b√°n.";
            }

            // T·∫°o response v·ªõi th√¥ng tin th·ª±c t·∫ø t·ª´ database
            StringBuilder response = new StringBuilder();
            // S·ª≠ d·ª•ng Markdown ƒë·ªÉ ƒë·ªãnh d·∫°ng cho ƒë·∫πp h∆°n
            response.append("üé´ **Th√¥ng tin v√© cho s·ª± ki·ªán: ").append(event.getTitle()).append("**\n");
            response.append("------------------------------------\n");

            for (TicketType ticket : ticketTypes) {
                response.append("‚Ä¢ **Lo·∫°i v√©:** ").append(ticket.getName()).append("\n");
                response.append("  - **Gi√°:** ").append(String.format("%,d", ticket.getFinalPrice())).append(" VNƒê\n"); // ƒê·ªãnh d·∫°ng s·ªë cho d·ªÖ ƒë·ªçc
                response.append("  - **C√≤n l·∫°i:** ").append(ticket.getAvailableQuantity()).append(" v√©\n");
                if (ticket.getDescription() != null && !ticket.getDescription().trim().isEmpty()) {
                    response.append("  - *M√¥ t·∫£:* ").append(ticket.getDescription()).append("\n");
                }
                response.append("\n");
            }

            response.append("üí° ƒê·ªÉ mua v√©, b·∫°n ch·ªâ c·∫ßn n√≥i 'Mua v√© ").append(event.getTitle()).append("' nh√©!");

            return response.toString();

        } catch (Exception e) {
            log.error("‚ùå Error handling ticket info query: {}", e.getMessage(), e);
            return "‚ùå ƒê√£ c√≥ l·ªói x·∫£y ra khi t√¥i c·ªë g·∫Øng l·∫•y th√¥ng tin v√©. Vui l√≤ng th·ª≠ l·∫°i sau.";
        }
    }

}
