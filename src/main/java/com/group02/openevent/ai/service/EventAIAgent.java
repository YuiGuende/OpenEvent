package com.group02.openevent.ai.service;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.group02.openevent.ai.dto.Action;
import com.group02.openevent.ai.dto.EventItem;
import com.group02.openevent.ai.dto.Message;
import com.group02.openevent.ai.dto.TimeSlot;
import com.group02.openevent.ai.mapper.AIEventMapper;
import com.group02.openevent.ai.model.Language;
import com.group02.openevent.ai.security.AISecurityService;
import com.group02.openevent.ai.qdrant.model.ActionType;
import com.group02.openevent.ai.qdrant.model.PendingEvent;
import com.group02.openevent.ai.qdrant.model.TimeContext;
import com.group02.openevent.ai.qdrant.service.QdrantService;
import com.group02.openevent.ai.qdrant.service.VectorIntentClassifier;
import com.group02.openevent.model.enums.EventStatus;
import com.group02.openevent.model.enums.EventType;
import com.group02.openevent.model.event.Event;
import com.group02.openevent.model.event.Place;
import com.group02.openevent.model.ticket.TicketType;
import com.group02.openevent.model.user.Customer;
import com.group02.openevent.repository.IUserRepo;
import com.group02.openevent.repository.ai.ChatMessageRepo;
import com.group02.openevent.service.EventService;
import com.group02.openevent.service.PlaceService;
import com.group02.openevent.service.TicketTypeService;
import com.group02.openevent.util.TimeSlotUnit;
import jakarta.servlet.http.HttpServletResponse;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.io.Serializable;
import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Service
@Slf4j
public class EventAIAgent implements Serializable {

    private final LLM llm;
    private final EmbeddingService embeddingService;
    private final QdrantService qdrantService;
    private final PlaceService placeService;
    private final EventService eventService;
    private final AgentEventService agentEventService;
    private final VectorIntentClassifier classifier;
    private final WeatherService weatherService;
    private final EventVectorSearchService eventVectorSearchService;
    private final OrderAIService orderAIService;
    private final IUserRepo userRepo;
    private final TicketTypeService ticketTypeService;
    private final AIEventMapper AIEventMapper;
    private final ChatMessageRepo chatMessageRepo;
    private final LanguageDetectionService languageDetectionService;
    private final TranslationService translationService;
    private final AISecurityService securityService;

    /** PendingEvent neo theo sessionId ƒë·ªÉ tr√°nh ƒë√® nhau gi·ªØa nhi·ªÅu phi√™n c·ªßa c√πng 1 user */
    private final Map<String, PendingEvent> pendingEvents = new HashMap<>();

    public EventAIAgent(EmbeddingService embeddingService,
                        PlaceService placeService,
                        EventService eventService,
                        AgentEventService agentEventService,
                        VectorIntentClassifier classifier,
                        WeatherService weatherService,
                        LLM llm,
                        QdrantService qdrantService,
                        EventVectorSearchService eventVectorSearchService,
                        OrderAIService orderAIService,
                        IUserRepo userRepo,
                        TicketTypeService ticketTypeService,
                        AIEventMapper AIEventMapper,
                        ChatMessageRepo chatMessageRepo,
                        LanguageDetectionService languageDetectionService,
                        TranslationService translationService,
                        AISecurityService securityService) {

        this.embeddingService = embeddingService;
        this.placeService = placeService;
        this.eventService = eventService;
        this.agentEventService = agentEventService;
        this.classifier = classifier;
        this.weatherService = weatherService;
        this.eventVectorSearchService = eventVectorSearchService;
        this.llm = llm;
        this.qdrantService = qdrantService;
        this.orderAIService = orderAIService;
        this.userRepo = userRepo;
        this.ticketTypeService = ticketTypeService;
        this.AIEventMapper = AIEventMapper;
        this.chatMessageRepo = chatMessageRepo;
        this.languageDetectionService = languageDetectionService;
        this.translationService = translationService;
        this.securityService = securityService;
        // KH√îNG gi·ªØ conversationHistory/pending theo user trong bean singleton
    }

    /* =========================
       SYSTEM PROMPT (c·ª•c b·ªô)
       ========================= */
    private String buildSystemPrompt() {
        StringBuilder systemPrompt = new StringBuilder();

        systemPrompt.append("""
B·∫°n l√† m·ªôt Tr·ª£ l√Ω AI gi√∫p ng∆∞·ªùi d√πng qu·∫£n l√Ω s·ª± ki·ªán v√† lu√¥n nh·ªõ c√°c ng√†y l·ªÖ v√† s·ª± ki·ªán quan tr·ªçng c·ªßa Vi·ªát Nam.
H√£y hi·ªÉu ng√¥n ng·ªØ t·ª± nhi√™n, linh ho·∫°t v·ªõi c√°c m√¥ t·∫£ nh∆∞ "t·ªëi nay", "cu·ªëi tu·∫ßn", v.v.

## PH·∫†M VI HO·∫†T ƒê·ªòNG:
B·∫°n l√† Tr·ª£ l√Ω AI chuy√™n v·ªÅ h·ªá th·ªëng qu·∫£n l√Ω s·ª± ki·ªán OpenEvent. 
CH·ªà tr·∫£ l·ªùi c√°c c√¢u h·ªèi li√™n quan ƒë·∫øn h·ªá th·ªëng OpenEvent:
‚úì S·ª± ki·ªán (Event) v√† qu·∫£n l√Ω s·ª± ki·ªán
‚úì Mua v√©, ƒë·∫∑t v√©, thanh to√°n (Ticket/Order/Payment)  
‚úì T√¨m ki·∫øm s·ª± ki·ªán tr√™n h·ªá th·ªëng
‚úì H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng c√°c t√≠nh nƒÉng c·ªßa OpenEvent
‚úì Th√¥ng tin v·ªÅ speakers, ƒë·ªãa ƒëi·ªÉm, schedule c·ªßa s·ª± ki·ªán
‚úì Email reminders v√† th√¥ng b√°o
‚úì Voucher v√† gi·∫£m gi√°
‚úì L·ªãch tr√¨nh v√† qu·∫£n l√Ω th·ªùi gian s·ª± ki·ªán
‚úì Th·ªùi ti·∫øt (Weather) - ƒë·ªÉ h·ªó tr·ª£ l·∫≠p k·∫ø ho·∫°ch s·ª± ki·ªán

KH√îNG tr·∫£ l·ªùi c√°c c√¢u h·ªèi ngo√†i ph·∫°m vi:
‚úó L·ªãch s·ª≠ Vi·ªát Nam, th·∫ø gi·ªõi (kh√¥ng li√™n quan s·ª± ki·ªán)
‚úó ƒê·ªãa l√Ω, khoa h·ªçc chung (kh√¥ng li√™n quan s·ª± ki·ªán)
‚úó VƒÉn h·ªçc, ngh·ªá thu·∫≠t (kh√¥ng li√™n quan s·ª± ki·ªán)
‚úó Tin t·ª©c, ch√≠nh tr·ªã (kh√¥ng li√™n quan s·ª± ki·ªán)
‚úó ·∫®m th·ª±c, th·ªÉ thao (kh√¥ng li√™n quan s·ª± ki·ªán)
‚úó Gi·∫£i tr√≠ c√° nh√¢n kh√¥ng li√™n quan ƒë·∫øn h·ªá th·ªëng
‚úó C√¢u h·ªèi chung chung v·ªÅ b·∫•t k·ª≥ ch·ªß ƒë·ªÅ n√†o kh√¥ng thu·ªôc OpenEvent

Khi nh·∫≠n ƒë∆∞·ª£c c√¢u h·ªèi ngo√†i ph·∫°m vi, h√£y l·ªãch s·ª± t·ª´ ch·ªëi v√† ƒë·ªÅ xu·∫•t h·ªó tr·ª£:

V√≠ d·ª• t·ª´ ch·ªëi:
"Xin l·ªói anh/ch·ªã, em ch·ªâ c√≥ th·ªÉ h·ªó tr·ª£ v·ªÅ h·ªá th·ªëng OpenEvent v√† c√°c s·ª± ki·ªán th√¥i ·∫°.
Em c√≥ th·ªÉ gi√∫p anh/ch·ªã:
- T√¨m ki·∫øm s·ª± ki·ªán
- Mua v√© s·ª± ki·ªán
- T·∫°o v√† qu·∫£n l√Ω s·ª± ki·ªán
- Xem th√¥ng tin v·ªÅ speakers v√† ƒë·ªãa ƒëi·ªÉm
Anh/ch·ªã c·∫ßn h·ªó tr·ª£ g√¨ v·ªÅ OpenEvent ·∫°? üòä"

N·∫øu c√¢u h·ªèi c√≥ li√™n quan ƒë·∫øn s·ª± ki·ªán tr√™n h·ªá th·ªëng OpenEvent (v√≠ d·ª•: "S·ª± ki·ªán √¢m nh·∫°c", "Workshop Python", "Festival vƒÉn h√≥a"), th√¨ TR·∫¢ L·ªúI NGAY.

## V·ªÄ C√ÅCH X∆ØNG H√î V√Ä GIAO TI·∫æP:
- Khi ng∆∞·ªùi d√πng y√™u c·∫ßu thay ƒë·ªïi c√°ch x∆∞ng h√¥ (v√≠ d·ª•: "b·∫°n l√† v·ª£ t√¥i l√† ch·ªìng", "x∆∞ng h√¥ anh em", "g·ªçi t√¥i l√† em/ch·ªã/anh", "b·∫°n l√† v·ª£"),
  h√£y ghi nh·ªõ v√† √°p d·ª•ng ngay l·∫≠p t·ª©c trong c√°c c√¢u tr·∫£ l·ªùi ti·∫øp theo.
- V√≠ d·ª•: 
  + N·∫øu ng∆∞·ªùi d√πng n√≥i "b·∫°n l√† v·ª£ t√¥i l√† ch·ªìng" ‚Üí b·∫°n s·∫Ω x∆∞ng "em" v√† g·ªçi ng∆∞·ªùi d√πng l√† "anh".
  + N·∫øu ng∆∞·ªùi d√πng n√≥i "x∆∞ng h√¥ anh em" ‚Üí b·∫°n s·∫Ω x∆∞ng "em" v√† g·ªçi ng∆∞·ªùi d√πng l√† "anh" ho·∫∑c "ch·ªã".
  + N·∫øu ng∆∞·ªùi d√πng n√≥i "g·ªçi t√¥i l√† em" ‚Üí b·∫°n s·∫Ω g·ªçi h·ªç l√† "em" v√† x∆∞ng "ch·ªã/anh" t√πy t√¨nh hu·ªëng.
- Sau khi thay ƒë·ªïi c√°ch x∆∞ng h√¥, ti·∫øp t·ª•c s·ª≠ d·ª•ng trong t·∫•t c·∫£ c√°c c√¢u tr·∫£ l·ªùi sau ƒë√≥.
- Kh√¥ng c·∫ßn nh·∫Øc l·∫°i vi·ªác ƒë√£ thay ƒë·ªïi c√°ch x∆∞ng h√¥ m·ªôt c√°ch d√†i d√≤ng, ch·ªâ c·∫ßn x√°c nh·∫≠n ng·∫Øn g·ªçn v√† √°p d·ª•ng ngay.
- V√≠ d·ª•: Ng∆∞·ªùi d√πng n√≥i "b·∫°n l√† v·ª£ t√¥i l√† ch·ªìng" ‚Üí B·∫°n tr·∫£ l·ªùi: "D·∫° em hi·ªÉu r·ªìi anh! ·ªí, v·∫≠y anh c·∫ßn em gi√∫p g√¨ h√¥m nay ·∫°?"

## M·ª§C TI√äU:
- G·ª£i √Ω, t·∫°o, s·ª≠a, ho·∫∑c xo√° s·ª± ki·ªán.
- Lu√¥n ph·∫£n h·ªìi b·∫±ng vƒÉn b·∫£n t·ª± nhi√™n (kh√¥ng hi·ªán JSON).
- N·∫øu thi·∫øu th√¥ng tin, h√£y h·ªèi l·∫°i ng∆∞·ªùi d√πng.
- B·∫°n h√£y ph·∫£n h·ªìi d·ª±a theo system message

## H∆Ø·ªöNG D·∫™N T∆Ø V·∫§N NH∆Ø NH√ÇN VI√äN:
Khi ng∆∞·ªùi d√πng h·ªèi v·ªÅ c√°ch thao t√°c tr√™n h·ªá th·ªëng ho·∫∑c c·∫ßn h∆∞·ªõng d·∫´n, h√£y h∆∞·ªõng d·∫´n chi ti·∫øt nh∆∞ m·ªôt nh√¢n vi√™n t∆∞ v·∫•n chuy√™n nghi·ªáp:

### H∆∞·ªõng d·∫´n mua v√© s·ª± ki·ªán:
- N·∫øu ng∆∞·ªùi d√πng h·ªèi "L√†m sao ƒë·ªÉ mua v√©?", "Mua v√© nh∆∞ th·∫ø n√†o?", h√£y h∆∞·ªõng d·∫´n chi ti·∫øt:
  "Em h∆∞·ªõng d·∫´n anh/ch·ªã mua v√© nh∆∞ sau:
  1Ô∏è‚É£ Anh/ch·ªã cho em bi·∫øt t√™n s·ª± ki·ªán mu·ªën tham gia
  2Ô∏è‚É£ Em s·∫Ω hi·ªÉn th·ªã t·∫•t c·∫£ lo·∫°i v√© c√≥ s·∫µn v·ªõi gi√° v√† s·ªë l∆∞·ª£ng
  3Ô∏è‚É£ Anh/ch·ªã ch·ªçn lo·∫°i v√© ph√π h·ª£p
  4Ô∏è‚É£ Cung c·∫•p th√¥ng tin: t√™n, email, s·ªë ƒëi·ªán tho·∫°i
  5Ô∏è‚É£ Em s·∫Ω t√≥m t·∫Øt ƒë∆°n h√†ng v√† anh/ch·ªã x√°c nh·∫≠n
  6Ô∏è‚É£ Sau khi x√°c nh·∫≠n, h·ªá th·ªëng s·∫Ω t·∫°o link thanh to√°n PayOS
  7Ô∏è‚É£ Anh/ch·ªã thanh to√°n v√† nh·∫≠n v√© qua email
  
  Anh/ch·ªã ƒë√£ s·∫µn s√†ng r·ªìi ch·ª©? Vui l√≤ng cho em bi·∫øt s·ª± ki·ªán anh/ch·ªã mu·ªën mua v√© nh√©! üòä"

### H∆∞·ªõng d·∫´n xem th√¥ng tin v√©:
- N·∫øu ng∆∞·ªùi d√πng h·ªèi "Xem v√© ·ªü ƒë√¢u?", "L√†m sao bi·∫øt gi√° v√©?", h√£y h∆∞·ªõng d·∫´n:
  "Anh/ch·ªã c√≥ th·ªÉ h·ªèi em v·ªÅ th√¥ng tin v√© c·ªßa b·∫•t k·ª≥ s·ª± ki·ªán n√†o.
  V√≠ d·ª•: 'Xem v√© s·ª± ki·ªán X' ho·∫∑c 'Gi√° v√© s·ª± ki·ªán Y l√† bao nhi√™u?'
  Em s·∫Ω hi·ªÉn th·ªã ƒë·∫ßy ƒë·ªß th√¥ng tin v·ªÅ c√°c lo·∫°i v√©, gi√° c·∫£ v√† s·ªë l∆∞·ª£ng c√≤n l·∫°i.
  
  Anh/ch·ªã mu·ªën xem v√© c·ªßa s·ª± ki·ªán n√†o ·∫°? üé´"

### H∆∞·ªõng d·∫´n t√¨m ki·∫øm s·ª± ki·ªán:
- N·∫øu ng∆∞·ªùi d√πng h·ªèi "T√¨m s·ª± ki·ªán ·ªü ƒë√¢u?", h√£y h∆∞·ªõng d·∫´n:
  "Em c√≥ th·ªÉ gi√∫p anh/ch·ªã t√¨m s·ª± ki·ªán theo nhi·ªÅu c√°ch:
  - Theo t√™n s·ª± ki·ªán: 'T√¨m s·ª± ki·ªán Music Night'
  - Theo lo·∫°i s·ª± ki·ªán: 'T√¨m workshop', 'T√¨m concert'
  - Theo ƒë·ªãa ƒëi·ªÉm: 'T√¨m s·ª± ki·ªán ·ªü ƒê√† N·∫µng'
  - Theo th·ªùi gian: 'S·ª± ki·ªán h√¥m nay', 'S·ª± ki·ªán tu·∫ßn n√†y'
  
  Anh/ch·ªã mu·ªën t√¨m s·ª± ki·ªán nh∆∞ th·∫ø n√†o ·∫°? üîç"

### H∆∞·ªõng d·∫´n t·∫°o s·ª± ki·ªán:
- N·∫øu ng∆∞·ªùi d√πng h·ªèi "T·∫°o s·ª± ki·ªán nh∆∞ th·∫ø n√†o?", h√£y h∆∞·ªõng d·∫´n:
  "ƒê·ªÉ t·∫°o s·ª± ki·ªán, anh/ch·ªã c·∫ßn cung c·∫•p cho em c√°c th√¥ng tin sau:
  1Ô∏è‚É£ T√™n s·ª± ki·ªán
  2Ô∏è‚É£ Th·ªùi gian b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c
  3Ô∏è‚É£ ƒê·ªãa ƒëi·ªÉm t·ªï ch·ª©c
  4Ô∏è‚É£ M√¥ t·∫£ s·ª± ki·ªán (t√πy ch·ªçn)
  5Ô∏è‚É£ Lo·∫°i s·ª± ki·ªán (WORKSHOP, MUSIC, v.v.)
  
  Anh/ch·ªã c√≥ th·ªÉ n√≥i v·ªõi em nh∆∞: 'T·∫°o s·ª± ki·ªán Music Night v√†o 20h ng√†y 15/12 t·∫°i Nh√† vƒÉn h√≥a'
  
  Em s·∫µn s√†ng h·ªó tr·ª£ anh/ch·ªã t·∫°o s·ª± ki·ªán ngay! üéâ"

### Lu√¥n ch·ªß ƒë·ªông v√† th√¢n thi·ªán:
- H·ªèi th√™m th√¥ng tin n·∫øu c·∫ßn: "ƒê·ªÉ em h·ªó tr·ª£ t·ªët h∆°n, anh/ch·ªã c√≥ th·ªÉ cho em bi·∫øt th√™m [chi ti·∫øt c·∫ßn thi·∫øt] kh√¥ng ·∫°?"
- ƒê·ªÅ xu·∫•t gi·∫£i ph√°p: "Em nghƒ© anh/ch·ªã c√≥ th·ªÉ th·ª≠ [g·ª£i √Ω] xem sao ·∫°!"
- X√°c nh·∫≠n l·∫°i ƒë·ªÉ tr√°nh hi·ªÉu nh·∫ßm: "V·∫≠y l√† anh/ch·ªã mu·ªën [t√≥m t·∫Øt l·∫°i y√™u c·∫ßu] ƒë√∫ng kh√¥ng ·∫°?"
- Lu√¥n s·∫µn s√†ng h·ªó tr·ª£: "N·∫øu c√≥ th·∫Øc m·∫Øc g√¨, anh/ch·ªã c·ª© h·ªèi em nh√©! üòä"

## X·ª¨ L√ù T·∫†O S·ª∞ KI·ªÜN:
1. N·∫øu ng∆∞·ªùi d√πng y√™u c·∫ßu t·∫°o s·ª± ki·ªán:
- Khi ng∆∞·ªùi d√πng y√™u c·∫ßu t·∫°o s·ª± ki·ªán (v√≠ d·ª•: "L√™n s·ª± ki·ªán", "T·∫°o s·ª± ki·ªán",...), b·∫°n ph·∫£i x√°c ƒë·ªãnh v√† xu·∫•t h√†nh ƒë·ªông n·ªôi b·ªô l√† `ADD_EVENT`.
- N·∫øu th√¥ng tin s·ª± ki·ªán ƒë·∫ßy ƒë·ªß (ti√™u ƒë·ªÅ, th·ªùi gian b·∫Øt ƒë·∫ßu, th·ªùi gian k·∫øt th√∫c, ƒë·ªãa ƒëi·ªÉm...), h√£y xu·∫•t ra m·ªôt JSON h√†nh ƒë·ªông n·ªôi b·ªô theo ƒë·ªãnh d·∫°ng sau:            
   [
     {
       "toolName": "ADD_EVENT",
       "args": {
         "event_title": "...",        
         "starts_at": "YYYY-MM-DDTHH:mm", 
         "ends_at": "YYYY-MM-DDTHH:mm",    
         "place": "...",                 
         "description": "...",
         "event_type": "...",       
         "capacity": 100
       }
     }
   ]
- Kh√¥ng gi·∫£i th√≠ch hay hi·ªÉn th·ªã n·ªôi dung JSON cho ng∆∞·ªùi d√πng.
2. N·∫øu th·ªùi ti·∫øt c√≥ kh·∫£ nƒÉng m∆∞a (do h·ªá th·ªëng th·ªùi ti·∫øt tr·∫£ v·ªÅ), h√£y ph·∫£n h·ªìi nh∆∞ sau:
   - V√≠ d·ª•: "üåß Th·ªùi ti·∫øt c√≥ th·ªÉ c√≥ m∆∞a v√†o th·ªùi gian n√†y. B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c t·∫°o s·ª± ki·ªán ngo√†i tr·ªùi n√†y kh√¥ng?"
   - N·∫øu ng∆∞·ªùi d√πng x√°c nh·∫≠n "c√≥", ti·∫øp t·ª•c t·∫°o s·ª± ki·ªán tr∆∞·ªõc ƒë√≥ ƒëang ch·ªù (`PendingEvent`).
   - N·∫øu ng∆∞·ªùi d√πng t·ª´ ch·ªëi, kh√¥ng t·∫°o s·ª± ki·ªán.

3. N·∫øu ƒê·ªãa ƒëi·ªÉm v√† th·ªùi gian y√™u c·∫ßu tr√πng v·ªõi s·ª± ki·ªán ƒë√£ c√≥:
   - **Kh√¥ng t·ª± √Ω t·∫°o s·ª± ki·ªán!**
   - H·ªèi l·∫°i ng∆∞·ªùi d√πng:  
     > "‚è∞ Th·ªùi gian b·∫°n ch·ªçn ƒëang b·ªã tr√πng v·ªõi m·ªôt s·ª± ki·ªán kh√°c. B·∫°n c√≥ mu·ªën ch·ªçn th·ªùi gian ho·∫∑c ƒë·ªãa ƒëi·ªÉm kh√°c kh√¥ng?"

## KHI S·ª¨A S·ª∞ KI·ªÜN:
- Khi ng∆∞·ªùi d√πng n√≥i c√°c c√¢u nh∆∞:
    -"Thay ƒë·ªïi th·ªùi gian c·ªßa s·ª± ki·ªán `workshop` l·∫°i"
    -"S·ª≠a s·ª± ki·ªán `event_id` = 1"
    -"Update s·ª± ki·ªán"
    => Hi·ªÉu l√† ng∆∞·ªùi d√πng mu·ªën** S·ª≠a s·ª± ki·ªán"
- N·∫øu c√≥ `event_id`, d√πng n√≥.
- N·∫øu kh√¥ng, d√πng `original_title` ƒë·ªÉ t√¨m s·ª± ki·ªán c·∫ßn s·ª≠a.
- V√≠ d·ª•:
[
  {
    "toolName": "UPDATE_EVENT",
    "args": {
      "event_id": 123,
      "original_title": "workshop c≈©",
      "title": "workshop m·ªõi",
      "start_time": "YYYY-MM-DDTHH:mm",
      "description": "m√¥ t·∫£ m·ªõi"
    }
  }
]
- Kh√¥ng gi·∫£i th√≠ch hay hi·ªÉn th·ªã n·ªôi dung JSON cho ng∆∞·ªùi d√πng.

## KHI XO√Å S·ª∞ KI·ªÜN:
- Khi ng∆∞·ªùi d√πng n√≥i c√°c c√¢u nh∆∞:
    -"X√≥a s·ª± ki·ªán `music` ng√†y 21 th√°ng 7"
    -"X√≥a cu·ªôc thi Hackathon"
    -"X√≥a s·ª± ki·ªán `event_id` = 1"
    => Hi·ªÉu l√† ng∆∞·ªùi d√πng mu·ªën** X√≥a s·ª± ki·ªán"
- D√πng `event_id` n·∫øu c√≥, ho·∫∑c `title` n·∫øu kh√¥ng c√≥ ID.
- V√≠ d·ª•:
[
  { "toolName": "DELETE_EVENT", "args": { "event_id": 42 } }
]
ho·∫∑c
[
  { "toolName": "DELETE_EVENT", "args": { "title": "T√™n s·ª± ki·ªán" } }
]
- Kh√¥ng gi·∫£i th√≠ch hay hi·ªÉn th·ªã n·ªôi dung JSON cho ng∆∞·ªùi d√πng.

## NGUY√äN T·∫ÆC:
- Tr√°nh d√πng t·ª´ k·ªπ thu·∫≠t v·ªõi ng∆∞·ªùi d√πng.
- Lu√¥n ƒë·∫£m b·∫£o r·∫±ng c√°c tr∆∞·ªùng T√äN S·ª∞ KI·ªÜN, TH·ªúI GIAN B·∫ÆT ƒê·∫¶U/K·∫æT TH√öC, v√† ƒê·ªäA ƒêI·ªÇM ƒë·ªÅu ƒë∆∞·ª£c x√°c ƒë·ªãnh. N·∫øu b·∫•t k·ª≥ tr∆∞·ªùng n√†o b·ªã thi·∫øu, h√£y h·ªèi l·∫°i ng∆∞·ªùi d√πng.
- N·∫øu ph√°t hi·ªán ƒë·ªãa ƒëi·ªÉm v√† th·ªùi gian b·ªã tr√πng v·ªõi s·ª± ki·ªán kh√°c, h√£y h·ªèi l·∫°i ng∆∞·ªùi d√πng m·ªôt th·ªùi gian kh√°c ho·∫∑c m·ªôt ƒë·ªãa ƒëi·ªÉm kh√°c. Kh√¥ng t·ª± √Ω th√™m n·∫øu b·ªã tr√πng.
- Lu√¥n di·ªÖn gi·∫£i √Ω ƒë·ªãnh r√µ r√†ng, th√¢n thi·ªán.
""");
        systemPrompt.append("- Ng√†y hi·ªán t·∫°i l√† ")
                .append(LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy")))
                .append(".\n");
        systemPrompt.append("- N·∫øu ch∆∞a r√µ n·ªôi dung ho·∫∑c ng∆∞·ªùi d√πng ch∆∞a x√°c nh·∫≠n th·ªùi gian g·ª£i √Ω, h√£y h·ªèi l·∫°i ng∆∞·ªùi d√πng tr∆∞·ªõc khi tr·∫£ v·ªÅ JSON.\n");

        systemPrompt.append("C√°c lo·∫°i Event:\n");
        for (EventType type : EventType.values()) {
            systemPrompt.append("- ").append(type.name()).append("\n");
        }

        systemPrompt.append("""
        
## X·ª¨ L√ù MUA V√â S·ª∞ KI·ªÜN:
1. Khi ng∆∞·ªùi d√πng mu·ªën mua v√© (v√≠ d·ª•: "Mua v√© s·ª± ki·ªán X", "ƒêƒÉng k√Ω tham gia Y", "ƒê·∫∑t v√© Z"):
   - H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông t√¨m s·ª± ki·ªán theo t√™n
   - Hi·ªÉn th·ªã danh s√°ch lo·∫°i v√© c√≥ s·∫µn v·ªõi gi√° v√† s·ªë l∆∞·ª£ng c√≤n l·∫°i
   - H∆∞·ªõng d·∫´n ng∆∞·ªùi d√πng ch·ªçn lo·∫°i v√© ph√π h·ª£p

2. Khi ng∆∞·ªùi d√πng ch·ªçn lo·∫°i v√©:
   - X√°c nh·∫≠n lo·∫°i v√© ƒë√£ ch·ªçn v√† gi√°
   - Y√™u c·∫ßu th√¥ng tin ng∆∞·ªùi tham gia: t√™n, email, s·ªë ƒëi·ªán tho·∫°i

3. Khi ng∆∞·ªùi d√πng cung c·∫•p th√¥ng tin:
   - Tr√≠ch xu·∫•t c√°c th√¥ng tin: t√™n, email, SƒêT
   - Hi·ªÉn th·ªã t√≥m t·∫Øt ƒë∆°n h√†ng ƒë·∫ßy ƒë·ªß
   - Y√™u c·∫ßu x√°c nh·∫≠n cu·ªëi c√πng (C√≥/Kh√¥ng)

4. Khi ng∆∞·ªùi d√πng x√°c nh·∫≠n:
   - H·ªá th·ªëng t·ª± ƒë·ªông t·∫°o ƒë∆°n h√†ng
   - T·∫°o payment link qua PayOS
   - Tr·∫£ v·ªÅ link thanh to√°n cho ng∆∞·ªùi d√πng

**L∆ØU √ù QUAN TR·ªåNG V·ªÄ MUA V√â:**
- Quy tr√¨nh mua v√© ƒë∆∞·ª£c x·ª≠ l√Ω T·ª∞ ƒê·ªòNG b·ªüi h·ªá th·ªëng
- KH√îNG c·∫ßn xu·∫•t JSON cho ch·ª©c nƒÉng mua v√©
- Ch·ªâ tr·∫£ l·ªùi t·ª± nhi√™n v√† h∆∞·ªõng d·∫´n ng∆∞·ªùi d√πng
- N·∫øu thi·∫øu th√¥ng tin, h·ªèi l·∫°i ng∆∞·ªùi d√πng m·ªôt c√°ch th√¢n thi·ªán
- N·∫øu v√© ƒë√£ h·∫øt, ƒë·ªÅ xu·∫•t c√°c lo·∫°i v√© kh√°c c√≤n s·∫µn
- Lu√¥n x√°c nh·∫≠n l·∫°i tr∆∞·ªõc khi t·∫°o ƒë∆°n h√†ng

## X·ª¨ L√ù G·ª¨I EMAIL NH·∫ÆC NH·ªû:
1. Khi ng∆∞·ªùi d√πng y√™u c·∫ßu g·ª≠i email nh·∫Øc nh·ªü (v√≠ d·ª•: "Nh·∫Øc t√¥i v·ªÅ s·ª± ki·ªán X tr∆∞·ªõc 30 ph√∫t", "G·ª≠i email tr∆∞·ªõc 1 gi·ªù"):
   - H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông t√¨m s·ª± ki·ªán theo t√™n ho·∫∑c s·ª≠ d·ª•ng s·ª± ki·ªán s·∫Øp t·ªõi
   - Tr√≠ch xu·∫•t t√™n s·ª± ki·ªán (n·∫øu c√≥) v√† th·ªùi gian nh·∫Øc nh·ªü.
   [
      {
        "toolName": "SET_REMINDER",
        "args": {
          "event_title": "s·ª± ki·ªán ABC",
          "remind_minutes": 15
        }
      }
   ]
   - Kh√¥ng gi·∫£i th√≠ch hay hi·ªÉn th·ªã n·ªôi dung JSON cho ng∆∞·ªùi d√πng.
   - L∆∞u y√™u c·∫ßu nh·∫Øc nh·ªü v√†o h·ªá th·ªëng
   - X√°c nh·∫≠n v·ªõi ng∆∞·ªùi d√πng v·ªÅ vi·ªác s·∫Ω g·ª≠i email

2. H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông g·ª≠i email nh·∫Øc nh·ªü tr∆∞·ªõc th·ªùi gian s·ª± ki·ªán b·∫Øt ƒë·∫ßu
   - Email s·∫Ω ƒë∆∞·ª£c g·ª≠i ƒë·∫øn ƒë·ªãa ch·ªâ email c·ªßa ng∆∞·ªùi d√πng
   - N·ªôi dung email bao g·ªìm th√¥ng tin s·ª± ki·ªán v√† th·ªùi gian
""");
        return systemPrompt.toString();
    }

    /* =========================
       X√¢y context theo session
       ========================= */
    private List<Message> buildConversationContext(String sessionId, Long userId) {
        List<Message> ctx = new ArrayList<>();
        ctx.add(new Message("system", buildSystemPrompt()));

        if (sessionId == null) return ctx;

        try {
            List<com.group02.openevent.models.ai.ChatMessage> sessionMessages =
                    chatMessageRepo.findByUserIdAndSessionIdOrderByTimestampAsc(userId, sessionId);

            int startIndex = Math.max(0, sessionMessages.size() - 10); // l·∫•y 10 tin g·∫ßn nh·∫•t
            for (int i = startIndex; i < sessionMessages.size(); i++) {
                com.group02.openevent.models.ai.ChatMessage msg = sessionMessages.get(i);
                String role = Boolean.TRUE.equals(msg.getIsFromUser()) ? "user" : "assistant";
                ctx.add(new Message(role, msg.getMessage()));
            }
            log.debug("Loaded {} messages from session {} for user {}", sessionMessages.size(), sessionId, userId);
        } catch (Exception e) {
            log.warn("Failed to load session context for session {}: {}", sessionId, e.getMessage());
        }
        return ctx;
    }

    /* =========================
       Public APIs
       ========================= */

    /**
     * X·ª≠ l√Ω input v·ªõi context c·ªßa phi√™n (multi-session).
     */
    @Transactional
    public String reply(String userInput, Long userId, String sessionId) throws Exception {
        List<Message> context = buildConversationContext(sessionId, userId);
        return processUserInput(userInput, userId, sessionId, context, null);
    }

    /**
     * Greeting kh√¥ng gi·ªØ state; d·ª±ng prompt t·ªëi thi·ªÉu.
     */
    public String getGreeting(String sessionId, Long userId) {
        List<Message> ctx = new ArrayList<>();
        ctx.add(new Message("system", buildSystemPrompt()));
        ctx.add(new Message("user", "Xin ch√†o, t√¥i c·∫ßn t∆∞ v·∫•n qu·∫£n l√Ω l·ªãch tr√¨nh"));
        try {
            return llm.generateResponse(ctx);
        } catch (Exception e) {
            return "ü§ñ Xin ch√†o! T√¥i l√† AI Assistant qu·∫£n l√Ω l·ªãch tr√¨nh th√¥ng minh.\n"
                    + "T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n"
                    + "‚úÖ T·∫°o l·ªãch h·ªçc t·∫≠p, c√¥ng vi·ªác, s·ª± ki·ªán\n"
                    + "‚úÖ T·ªëi ∆∞u h√≥a th·ªùi gian\n"
                    + "‚úÖ ƒê∆∞a ra l·ªùi khuy√™n qu·∫£n l√Ω th·ªùi gian\n\n"
                    + "H√£y chia s·∫ª k·∫ø ho·∫°ch c·ªßa b·∫°n ƒë·ªÉ b·∫Øt ƒë·∫ßu!";
        }
    }

    public boolean shouldEndConversation(String userInput) {
        String input = userInput.toLowerCase().trim();
        return input.equals("bye") || input.equals("t·∫°m bi·ªát")
                || input.equals("k·∫øt th√∫c") || input.equals("quit")
                || input.equals("exit") || input.equals("end");
    }

    public String getConversationSummary(String sessionId, Long userId) {
        List<Message> ctx = buildConversationContext(sessionId, userId);
        if (ctx.size() <= 1) {
            return "Kh√¥ng c√≥ cu·ªôc tr√≤ chuy·ªán n√†o ƒë∆∞·ª£c ghi nh·∫≠n.";
        }
        StringBuilder sb = new StringBuilder("üìå T√ìM T·∫ÆT CU·ªòC TR√í CHUY·ªÜN:\n");
        for (Message msg : ctx) {
            if ("system".equals(msg.getRole())) continue;
            sb.append("user".equals(msg.getRole()) ? "üßë‚Äçüíª B·∫°n: " : "ü§ñ AI: ")
                    .append(msg.getContent()).append("\n");
        }
        return sb.toString();
    }

    public List<Event> getCurrentEvent(Long userId) {
        List<Event> events = eventService.getEventByUserId(userId);
        LocalDate today = LocalDate.now();

        return events.stream()
                .filter(e -> {
                    LocalDate start = e.getStartsAt().toLocalDate();
                    LocalDate end = e.getEndsAt().toLocalDate();
                    return !start.isAfter(today) && !end.isBefore(today);
                })
                .sorted(Comparator.comparing(Event::getStartsAt))
                .toList();
    }

    /* =========================
       Core processing
       ========================= */

    /**
     * Ki·ªÉm tra xem c√¢u h·ªèi c√≥ ngo√†i ph·∫°m vi OpenEvent hay kh√¥ng
     */
    private boolean isOutOfScope(String userInput) {
        if (userInput == null || userInput.trim().isEmpty()) {
            return false;
        }

        String input = userInput.toLowerCase();

        // C√°c t·ª´ kh√≥a ngo√†i ph·∫°m vi
        String[] outOfScopeKeywords = {
            "l·ªãch s·ª≠ vi·ªát nam", "l·ªãch s·ª≠ trung qu·ªëc", "l·ªãch s·ª≠ m·ªπ", "t·ªïng th·ªëng m·ªπ",
            "khoa h·ªçc v·∫≠t l√Ω", "h√≥a h·ªçc", "sinh h·ªçc", "khoa h·ªçc",
            "ƒë·ªãa l√Ω vi·ªát nam", "ƒë·ªãa l√Ω th·∫ø gi·ªõi", "th·ªß ƒë√¥ c·ªßa", "gi·ªõi thi·ªáu v·ªÅ",
            "vƒÉn h·ªçc vi·ªát nam", "vƒÉn h·ªçc th·∫ø gi·ªõi", "nh√† vƒÉn", "t√°c ph·∫©m",
            "tin t·ª©c", "ch√≠nh tr·ªã", "b·∫ßu c·ª≠", "qu·ªëc h·ªôi", "ƒë·∫£ng ch√≠nh tr·ªã",
            "n·∫•u ƒÉn", "m√≥n ƒÉn", "c√¥ng th·ª©c", "·∫©m th·ª±c",
            "ƒë√° b√≥ng", "world cup", "euro", "world series", "olympic",
            "gi·∫£i tr√≠", "phim ·∫£nh", "mv", "nh·∫°c m·ªõi", "game",
            "th·ªùi s·ª±", "tin n√≥ng", "s·ª± ki·ªán th·∫ø gi·ªõi"
        };

        // Ki·ªÉm tra kh√¥ng ch·ª©a c√°c t·ª´ kh√≥a li√™n quan ƒë·∫øn OpenEvent
        String[] openEventKeywords = {
            "s·ª± ki·ªán", "event", "v√©", "ticket", "mua v√©", "ƒë·∫∑t v√©",
            "workshop", "music", "festival", "competition", "conference",
            "speaker", "ƒë·ªãa ƒëi·ªÉm", "location", "place",
            "thanh to√°n", "payment", "payos", "order",
            "reminder", "email", "th√¥ng b√°o", "nh·∫Øc nh·ªü",
            "voucher", "gi·∫£m gi√°", "discount",
            "schedule", "l·ªãch tr√¨nh", "time",
            "th·ªùi ti·∫øt", "weather", "m∆∞a", "n·∫Øng", "d·ª± b√°o", "forecast"
        };

        // N·∫øu c√≥ t·ª´ kh√≥a OpenEvent, kh√¥ng ph·∫£i ngo√†i ph·∫°m vi
        for (String keyword : openEventKeywords) {
            if (input.contains(keyword)) {
                return false;
            }
        }

        // Ki·ªÉm tra n·∫øu c√≥ t·ª´ kh√≥a ngo√†i ph·∫°m vi
        for (String keyword : outOfScopeKeywords) {
            if (input.contains(keyword)) {
                return true;
            }
        }

        return false;
    }

    /**
     * Ph·∫£n h·ªìi cho c√¢u h·ªèi ngo√†i ph·∫°m vi
     */
    private String handleOutOfScopeQuestion() {
        return "Xin l·ªói anh/ch·ªã, em ch·ªâ c√≥ th·ªÉ h·ªó tr·ª£ v·ªÅ h·ªá th·ªëng OpenEvent v√† c√°c s·ª± ki·ªán th√¥i ·∫°.\n\n" +
               "Em c√≥ th·ªÉ gi√∫p anh/ch·ªã:\n" +
               "‚úÖ T√¨m ki·∫øm s·ª± ki·ªán\n" +
               "‚úÖ Mua v√© s·ª± ki·ªán\n" +
               "‚úÖ T·∫°o v√† qu·∫£n l√Ω s·ª± ki·ªán\n" +
               "‚úÖ Xem th√¥ng tin v·ªÅ speakers v√† ƒë·ªãa ƒëi·ªÉm\n" +
               "‚úÖ Thanh to√°n v√† voucher\n\n" +
               "Anh/ch·ªã c·∫ßn h·ªó tr·ª£ g√¨ v·ªÅ OpenEvent ·∫°? üòä";
    }

    /**
     * Ki·ªÉm tra xem c√≥ ph·∫£i c√¢u h·ªèi v·ªÅ th·ªùi ti·∫øt kh√¥ng
     */
    private boolean isWeatherQuestion(String userInput) {
        if (userInput == null || userInput.trim().isEmpty()) {
            return false;
        }

        String input = userInput.toLowerCase();

        String[] weatherKeywords = {
            "th·ªùi ti·∫øt", "weather", "m∆∞a", "n·∫Øng", "d·ª± b√°o", "forecast",
            "tr·ªùi h√¥m nay", "th·ªùi ti·∫øt h√¥m nay", "ng√†y mai tr·ªùi",
            "h√¥m nay tr·ªùi", "weather today", "weather forecast"
        };

        for (String keyword : weatherKeywords) {
            if (input.contains(keyword)) {
                return true;
            }
        }

        return false;
    }

    /**
     * X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ th·ªùi ti·∫øt
     */
    private String handleWeatherQuestion(String userInput) {
        try {
            // Extract location from user input or use default
            String location = "Da Nang"; // Default location

            // Try to extract location from user input
            if (userInput.toLowerCase().contains("h√† n·ªôi") || userInput.toLowerCase().contains("hanoi")) {
                location = "Ha Noi";
            } else if (userInput.toLowerCase().contains("h·ªì ch√≠ minh") ||
                      userInput.toLowerCase().contains("ho chi minh")) {
                location = "Ho Chi Minh City";
            } else if (userInput.toLowerCase().contains("ƒë√† n·∫µng") ||
                      userInput.toLowerCase().contains("da nang")) {
                location = "Da Nang";
            } else if (userInput.toLowerCase().contains("h·∫£i ph√≤ng")) {
                location = "Hai Phong";
            }

            // Get weather forecast for today
            LocalDateTime today = LocalDateTime.now();
            String forecastNote = weatherService.getForecastNote(today, location);

            if (forecastNote != null && !forecastNote.isEmpty()) {
                return "üå§ **Th·ªùi ti·∫øt:**\n" + forecastNote +
                       "\n\nüí° L∆∞u √Ω: Th·ªùi ti·∫øt c√≥ th·ªÉ ·∫£nh h∆∞·ªüng ƒë·∫øn s·ª± ki·ªán ngo√†i tr·ªùi. " +
                       "Anh/ch·ªã c√≥ th·ªÉ c√¢n nh·∫Øc khi l·∫≠p k·∫ø ho·∫°ch s·ª± ki·ªán! üòä";
            } else {
                return "‚ö†Ô∏è Hi·ªán t·∫°i em ch∆∞a th·ªÉ l·∫•y th√¥ng tin th·ªùi ti·∫øt chi ti·∫øt. " +
                       "ƒê·ªÅ xu·∫•t anh/ch·ªã ki·ªÉm tra th·ªùi ti·∫øt tr√™n ·ª©ng d·ª•ng th·ªùi ti·∫øt tr∆∞·ªõc khi t·ªï ch·ª©c s·ª± ki·ªán ngo√†i tr·ªùi ·∫°! üòä";
            }
        } catch (Exception e) {
            log.error("Error getting weather forecast: {}", e.getMessage());
            return "‚ö†Ô∏è Xin l·ªói, em kh√¥ng th·ªÉ l·∫•y th√¥ng tin th·ªùi ti·∫øt l√∫c n√†y. " +
                   "Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c ki·ªÉm tra th·ªùi ti·∫øt qua ·ª©ng d·ª•ng th·ªùi ti·∫øt ·∫°! üòä";
        }
    }

    @Transactional
    public String processUserInput(String userInput,
                                   Long userId,
                                   String sessionId,
                                   List<Message> context,
                                   HttpServletResponse response) throws Exception {

        // Ki·ªÉm tra c√¢u h·ªèi c√≥ ngo√†i ph·∫°m vi kh√¥ng
        if (isOutOfScope(userInput)) {
            return handleOutOfScopeQuestion();
        }

        // Ki·ªÉm tra c√¢u h·ªèi v·ªÅ th·ªùi ti·∫øt
        if (isWeatherQuestion(userInput)) {
            return handleWeatherQuestion(userInput);
        }

        boolean shouldReload = false;
        StringBuilder systemResult = new StringBuilder();

        /* ===== Pending theo SESSION ===== */
        if (sessionId != null && pendingEvents.containsKey(sessionId)) {
            String answer = userInput.trim().toLowerCase();
            if (answer.contains("c√≥") || answer.contains("ok") || answer.contains("ti·∫øp t·ª•c")) {
                EventItem pendingItem = pendingEvents.remove(sessionId).getEventItem();
                Event eventToSave = AIEventMapper.toEvent(pendingItem);
                agentEventService.saveEvent(eventToSave);
                return "üìÖ ƒê√£ t·∫°o s·ª± ki·ªán: " + pendingItem.getTitle();
            } else if (answer.contains("kh√¥ng")) {
                pendingEvents.remove(sessionId);
                return "‚ùå ƒê√£ h·ªßy t·∫°o s·ª± ki·ªán do b·∫°n t·ª´ ch·ªëi.";
            } else {
                return "‚ùìB·∫°n c√≥ th·ªÉ x√°c nh·∫≠n l·∫°i: c√≥/kh√¥ng?";
            }
        }

        float[] userVector = embeddingService.getEmbedding(userInput);

        /* ==================== ORDER FLOW ==================== */
        ActionType intent = classifier.classifyIntent(userInput, userVector);
        if (intent == ActionType.BUY_TICKET) {
            List<Event> foundEvents = eventVectorSearchService.searchEvents(userInput, userId, 1);
            if (foundEvents.isEmpty()) {
                return "T√¥i hi·ªÉu b·∫°n mu·ªën mua v√©, nh∆∞ng t√¥i ch∆∞a nh·∫≠n ra t√™n s·ª± ki·ªán. B·∫°n c√≥ th·ªÉ n√≥i r√µ h∆°n ƒë∆∞·ª£c kh√¥ng, v√≠ d·ª•: 'Mua v√© s·ª± ki·ªán Music Night'";
            }
            String eventName = foundEvents.get(0).getTitle();
            Optional<Event> eventOpt = eventService.getFirstPublicEventByTitle(eventName.trim());
            if (eventOpt.isEmpty()) {
                return "‚ùå Kh√¥ng t√¨m th·∫•y s·ª± ki·ªán \"" + eventName.trim() + "\" ƒëang m·ªü b√°n v√©. Vui l√≤ng ki·ªÉm tra l·∫°i t√™n s·ª± ki·ªán.";
            }
            return orderAIService.startOrderCreation(userId, eventName.trim());
        }

        if (orderAIService.hasPendingOrder(userId)) {
            com.group02.openevent.ai.dto.PendingOrder pendingOrder = orderAIService.getPendingOrder(userId);

            switch (pendingOrder.getCurrentStep()) {
                case SELECT_EVENT -> {
                    return "‚ÑπÔ∏è Vui l√≤ng cho bi·∫øt t√™n s·ª± ki·ªán b·∫°n mu·ªën mua v√©.";
                }
                case SELECT_TICKET_TYPE -> {
                    return orderAIService.selectTicketType(userId, userInput);
                }
                case PROVIDE_INFO -> {
                    Map<String, String> info = extractParticipantInfo(userInput);
                    return orderAIService.provideInfo(userId, info);
                }
                case CONFIRM_ORDER -> {
                    ActionType confirmIntent = classifier.classifyConfirmIntent(userInput, userVector);
                    switch (confirmIntent) {
                        case CONFIRM_ORDER -> {
                            Map<String, Object> result = orderAIService.confirmOrder(userId);
                            return String.valueOf(result.get("message"));
                        }
                        case CANCEL_ORDER -> {
                            return orderAIService.cancelOrder(userId);
                        }
                        case UNKNOWN -> {
                            return "‚ùì T√¥i kh√¥ng hi·ªÉu r√µ √Ω c·ªßa b·∫°n. Vui l√≤ng tr·∫£ l·ªùi r√µ r√†ng:\n" +
                                    "‚Ä¢ 'C√≥' ho·∫∑c 'ƒê·ªìng √Ω' ƒë·ªÉ x√°c nh·∫≠n ƒë∆°n h√†ng\n" +
                                    "‚Ä¢ 'Kh√¥ng' ho·∫∑c 'H·ªßy' ƒë·ªÉ h·ªßy ƒë∆°n h√†ng";
                        }
                        default -> {
                            return "‚ùì T√¥i kh√¥ng hi·ªÉu r√µ √Ω c·ªßa b·∫°n. Vui l√≤ng tr·∫£ l·ªùi r√µ r√†ng:\n" +
                                    "‚Ä¢ 'C√≥' ho·∫∑c 'ƒê·ªìng √Ω' ƒë·ªÉ x√°c nh·∫≠n ƒë∆°n h√†ng\n" +
                                    "‚Ä¢ 'Kh√¥ng' ho·∫∑c 'H·ªßy' ƒë·ªÉ h·ªßy ƒë∆°n h√†ng";
                        }
                    }
                }
            }
        }
        /* ==================== END ORDER FLOW ==================== */

        // Th√™m user message v√†o context tr∆∞·ªõc khi g·ªçi LLM
        context.add(new Message("user", userInput));

        // Truy v·∫•n LLM
        String aiResponse = llm.generateResponse(context);
        aiResponse = aiResponse
                .replaceAll("(?s)```json\\s*", "")
                .replaceAll("(?s)```\\s*", "");

        // T√°ch JSON action (n·∫øu c√≥)
        Pattern jsonPattern = Pattern.compile("(\\[\\s*\\{[\\s\\S]*?\\}\\s*\\])");
        Matcher matcher = jsonPattern.matcher(aiResponse);
        String jsonPart = matcher.find() ? matcher.group() : null;

        // Text cho ng∆∞·ªùi d√πng
        String userVisibleText = (jsonPart != null)
                ? aiResponse.replace(jsonPart, "").trim()
                : aiResponse.trim();

        // Parse actions
        List<Action> actions = tryParseActions(jsonPart);

        if (actions != null && !actions.isEmpty()) {
            for (Action action : actions) {
                String tool = action.getToolName();
                try {
                    switch (tool) {
                        case "ADD_EVENT" -> {
                            Map<String, Object> args = action.getArgs();

                            String title = getStr(args, "title", "event_title", "name");
                            LocalDateTime start = getTime(args, "start_time", "starts_at", "start", "from", "begin");
                            LocalDateTime end = getTime(args, "end_time", "ends_at", "end", "to", "finish");

                            if (title == null || start == null || end == null) {
                                systemResult.append("üìù Thi·∫øu th√¥ng tin s·ª± ki·ªán (ti√™u ƒë·ªÅ ho·∫∑c th·ªùi gian).\n");
                                break;
                            }
                            if (!start.isBefore(end)) {
                                systemResult.append("‚õî Th·ªùi gian kh√¥ng h·ª£p l·ªá: b·∫Øt ƒë·∫ßu ph·∫£i tr∆∞·ªõc k·∫øt th√∫c.\n");
                                break;
                            }

                            String placeName = getStr(args, "place", "location");
                            Optional<Place> placeOpt = Optional.empty();

                            if (placeName != null) {
                                try {
                                    float[] placeVec = embeddingService.getEmbedding(placeName);
                                    List<Map<String, Object>> searchResults = qdrantService.searchPlacesByVector(placeVec, 1);
                                    if (!searchResults.isEmpty()) {
                                        Object placeIdObj = searchResults.get(0).get("place_id");
                                        if (placeIdObj instanceof Number n) {
                                            placeOpt = placeService.findPlaceById(n.longValue());
                                        } else {
                                            log.warn("Qdrant result missing/invalid place_id; fallback DB");
                                            placeOpt = placeService.findPlaceByNameFlexible(placeName);
                                        }
                                    } else {
                                        placeOpt = placeService.findPlaceByNameFlexible(placeName);
                                    }
                                } catch (Exception e) {
                                    log.error("Qdrant Place search failed: {}", e.getMessage());
                                    placeOpt = placeService.findPlaceByNameFlexible(placeName);
                                }
                            }

                            if (placeOpt.isPresent()) {
                                List<Event> conflicted = eventService.isTimeConflict(start, end, List.of(placeOpt.get()));
                                if (!conflicted.isEmpty()) {
                                    systemResult.append("‚ö†Ô∏è S·ª± ki·ªán b·ªã tr√πng th·ªùi gian/ƒë·ªãa ƒëi·ªÉm v·ªõi:\n");
                                    for (Event conflict : conflicted) {
                                        systemResult.append(" - ").append(conflict.getTitle())
                                                .append(" (").append(conflict.getStartsAt())
                                                .append(" - ").append(conflict.getEndsAt()).append(")\n");
                                    }
                                    break;
                                }
                            } else {
                                systemResult.append("‚õî ƒê·ªÉ t·∫°o s·ª± ki·ªán, b·∫°n c·∫ßn cung c·∫•p ƒë·ªãa ƒëi·ªÉm h·ª£p l·ªá.");
                                String placeNameRaw = getStr(args, "place", "location");
                                if (placeNameRaw != null && !placeNameRaw.isBlank()) {
                                    systemResult.append(" Kh√¥ng t√¨m th·∫•y ƒë·ªãa ƒëi·ªÉm \"").append(placeNameRaw).append("\".\n");
                                } else {
                                    systemResult.append(" Vui l√≤ng cung c·∫•p t√™n ƒë·ªãa ƒëi·ªÉm.\n");
                                }
                                break;
                            }

                            EventItem event = new EventItem();
                            event.setTitle(title);
                            event.setStartsAt(start);
                            event.setEndsAt(end);
                            event.setCreatedAt(LocalDateTime.now());

                            LocalDateTime defaultDeadline = start.minusHours(1);
                            LocalDateTime deadline = getTime(args, "enroll_deadline", "deadline");
                            event.setEnrollDeadline((deadline != null && deadline.isBefore(start)) ? deadline : defaultDeadline);

                            event.setEventStatus(EventStatus.DRAFT);

                            String eventTypeString = getStr(args, "event_type");
                            if (eventTypeString != null) {
                                try {
                                    event.setEventType(EventType.valueOf(eventTypeString.toUpperCase()));
                                } catch (IllegalArgumentException e) {
                                    event.setEventType(EventType.OTHERS);
                                }
                            } else {
                                event.setEventType(EventType.OTHERS);
                            }

                            if (args.containsKey("description")) {
                                event.setDescription((String) args.get("description"));
                            }

                            placeOpt.ifPresent(p -> event.setPlace(List.of(p)));

                            String intentWeather = classifier.classifyWeather(userInput, userVector);
                            if ("outdoor_activities".equals(intentWeather)) {
                                String forecastNote = weatherService.getForecastNote(start, "Da Nang");
                                if (forecastNote != null && !forecastNote.isEmpty()) {
                                    if (sessionId != null) pendingEvents.put(sessionId, new PendingEvent(event));
                                    return "üå¶ " + forecastNote + "\n‚ùìB·∫°n c√≥ mu·ªën ti·∫øp t·ª•c t·∫°o s·ª± ki·ªán n√†y kh√¥ng?";
                                }
                            }

                            Long orgId = getLong(args, "organization_id");

                            try {
                                log.info("Creating event: title={}, userId={}, orgId={}", event.getTitle(), userId, orgId);
                                Event saved = agentEventService.createEventByCustomer(userId, event, orgId);
                                systemResult.append("‚úÖ ƒê√£ th√™m s·ª± ki·ªán: ").append(saved.getTitle()).append("\n");
                                shouldReload = true;

                                // (T√πy ch·ªçn) upsert vector v√†o Qdrant ‚Äî c√≥ th·ªÉ b·∫≠t l·∫°i khi c·∫ßn
                                // float[] eventVec = embeddingService.getEmbedding(saved.getTitle());
                                // Map<String, Object> payload = Map.of(
                                //     "event_id", saved.getId(),
                                //     "title", saved.getTitle(),
                                //     "kind", "event",
                                //     "startsAt", saved.getStartsAt().toEpochSecond(java.time.ZoneOffset.UTC)
                                // );
                                // qdrantService.upsertEmbedding(String.valueOf(saved.getId()), eventVec, payload);

                            } catch (Exception e) {
                                log.error("Error creating event: {}", e.getMessage(), e);
                                systemResult.append("‚ùå L·ªói khi l∆∞u s·ª± ki·ªán: ").append(e.getMessage()).append("\n");
                            }
                        }

                        case "UPDATE_EVENT" -> {
                            Map<String, Object> args = action.getArgs();
                            Event existing = null;

                            if (!args.containsKey("event_id") && !args.containsKey("original_title")) {
                                systemResult.append("‚ùå Thi·∫øu ƒë·ªãnh danh s·ª± ki·ªán. H√£y cung c·∫•p `event_id` ho·∫∑c `original_title`.\n");
                                break;
                            }

                            if (args.containsKey("event_id")) {
                                Long eventId = getLong(args, "event_id");
                                if (eventId != null) {
                                    existing = eventService.getEventByEventId(eventId).orElse(null);
                                }
                            } else if (args.containsKey("original_title")) {
                                String oriTitle = getStr(args, "original_title");
                                existing = eventService.getFirstEventByTitle(oriTitle).orElse(null);
                            }

                            if (existing == null) {
                                systemResult.append("‚ùå Kh√¥ng t√¨m th·∫•y s·ª± ki·ªán ƒë·ªÉ c·∫≠p nh·∫≠t.\n");
                                break;
                            }

                            if (args.containsKey("title")) {
                                existing.setTitle(getStr(args, "title"));
                            }
                            if (args.containsKey("start_time") || args.containsKey("starts_at")) {
                                existing.setStartsAt(getTime(args, "start_time", "starts_at", "start", "from", "begin"));
                            }
                            if (args.containsKey("end_time") || args.containsKey("ends_at")) {
                                existing.setEndsAt(getTime(args, "end_time", "ends_at", "end", "to", "finish"));
                            }
                            if (args.containsKey("description")) {
                                existing.setDescription(getStr(args, "description"));
                            }
                            if (args.containsKey("image_url")) {
                                existing.setImageUrl(getStr(args, "image_url"));
                            }
                            if (args.containsKey("benefits")) {
                                existing.setBenefits(getStr(args, "benefits"));
                            }
                            if (args.containsKey("status")) {
                                try {
                                    existing.setStatus(EventStatus.valueOf(getStr(args, "status")));
                                } catch (IllegalArgumentException e) {
                                    systemResult.append("‚ö†Ô∏è Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá, gi·ªØ nguy√™n tr·∫°ng th√°i c≈©.\n");
                                }
                            }
                            if (args.containsKey("place")) {
                                String placeName = getStr(args, "place");
                                Place place = placeService.findPlaceByName(placeName).orElse(null);
                                if (place != null) {
                                    existing.setPlaces(List.of(place));
                                } else {
                                    systemResult.append("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ƒë·ªãa ƒëi·ªÉm: ").append(placeName).append("\n");
                                }
                            }

                            eventService.saveEvent(existing);
                            systemResult.append("üîÑ ƒê√£ c·∫≠p nh·∫≠t s·ª± ki·ªán: ").append(existing.getTitle()).append("\n");
                            shouldReload = true;
                        }

                        case "DELETE_EVENT" -> {
                            boolean deletedOne = false;
                            if (action.getArgs().containsKey("event_id")) {
                                Long id = getLong(action.getArgs(), "event_id");
                                if (id != null) {
                                    deletedOne = eventService.removeEvent(id);
                                }
                            } else if (action.getArgs().containsKey("title")) {
                                String title = getStr(action.getArgs(), "title");
                                deletedOne = eventService.deleteByTitle(title);
                            }

                            if (deletedOne) {
                                shouldReload = true;
                            } else {
                                systemResult.append("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y s·ª± ki·ªán ƒë·ªÉ xo√°.\n");
                            }
                        }

                        case "SET_REMINDER" -> {
                            Map<String, Object> args = action.getArgs();
                            Long remindMinutes = getLong(args, "remind_minutes");

                            if (remindMinutes == null) {
                                systemResult.append("‚ùì B·∫°n mu·ªën t√¥i nh·∫Øc tr∆∞·ªõc bao nhi√™u ph√∫t ho·∫∑c gi·ªù?");
                                break;
                            }

                            String eventTitle = getStr(args, "event_title", "title");
                            Optional<Event> targetEventOpt = Optional.empty();

                            if (eventTitle != null && !eventTitle.isBlank()) {
                                List<Event> results = eventVectorSearchService.searchEvents(eventTitle, userId, 1);
                                if (!results.isEmpty()) {
                                    targetEventOpt = Optional.of(results.get(0));
                                }
                            }

                            if (targetEventOpt.isEmpty()) {
                                targetEventOpt = eventService.getNextUpcomingEventByUserId(userId);
                            }

                            if (targetEventOpt.isEmpty()) {
                                systemResult.append("‚ùì M√¨nh kh√¥ng t√¨m th·∫•y s·ª± ki·ªán n√†o ƒë·ªÉ ƒë·∫∑t l·ªãch nh·∫Øc nh·ªü.");
                                break;
                            }

                            Event finalEvent = targetEventOpt.get();

                            Optional<Customer> customerOpt = userRepo.findByAccount_AccountId(userId);
                            if (customerOpt.isEmpty() || customerOpt.get().getAccount().getEmail() == null) {
                                systemResult.append("‚ùå T√†i kho·∫£n c·ªßa b·∫°n ch∆∞a c√≥ email ƒë·ªÉ nh·∫≠n th√¥ng b√°o.");
                                break;
                            }

                            String userEmail = customerOpt.get().getAccount().getEmail();
                            log.info("Saving reminder: eventId={}, userId={}, minutes={}", finalEvent.getId(), userId, remindMinutes);
                            agentEventService.createOrUpdateEmailReminder(finalEvent.getId(), remindMinutes.intValue(), userId);

                            systemResult.append("‚úÖ ƒê√£ ƒë·∫∑t l·ªãch nh·∫Øc nh·ªü cho s·ª± ki·ªán '")
                                    .append(finalEvent.getTitle())
                                    .append("' tr∆∞·ªõc ").append(remindMinutes).append(" ph√∫t. Email s·∫Ω ƒë∆∞·ª£c g·ª≠i ƒë·∫øn ")
                                    .append(userEmail).append(".\n");
                        }
                    }
                } catch (Exception e) {
                    log.error("Action '{}' failed: {}", tool, e.getMessage(), e);
                    systemResult.append("‚ùå L·ªói khi x·ª≠ l√Ω h√†nh ƒë·ªông: ").append(tool).append("\n");
                }
            }
        } else {
            // Kh√¥ng c√≥ action JSON

            // --- B·∫ÆT ƒê·∫¶U S·ª¨A L·ªñI HALLUCINATION ---

            // 1. Ngay l·∫≠p t·ª©c ki·ªÉm tra xem √Ω ƒë·ªãnh c·ªßa ng∆∞·ªùi d√πng c√≥ ph·∫£i l√† T√åM KI·∫æM kh√¥ng
            ActionType fallbackIntent = classifier.classifyIntent(userInput, userVector);

            if (fallbackIntent == ActionType.PROMPT_SUMMARY_TIME ||
                    fallbackIntent == ActionType.QUERY_TICKET_INFO) {

                // 2. G·ªçi c√°c h√†m helper ƒë·ªÉ l·∫•y d·ªØ li·ªáu TH·∫¨T t·ª´ DB
                String realDataSummary;
                try {
                    if (fallbackIntent == ActionType.PROMPT_SUMMARY_TIME) {
                        realDataSummary = handleSummaryRequest(userInput, userId); // G·ªçi h√†m t√¨m ki·∫øm s·ª± ki·ªán
                    } else {
                        realDataSummary = handleTicketInfoQuery(userInput, userVector); // G·ªçi h√†m t√¨m ki·∫øm v√©
                    }
                } catch (Exception e) {
                    log.error("L·ªói khi ch·∫°y fallback intent: {}", e.getMessage());
                    return "‚ùå ƒê√£ c√≥ l·ªói x·∫£y ra khi t√¥i c·ªë g·∫Øng t√¨m ki·∫øm th√¥ng tin.";
                }

                // 3. KI·ªÇM TRA XEM C√ì D·ªÆ LI·ªÜU TH·∫¨T KH√îNG
                // (Ki·ªÉm tra c√°c chu·ªói r·ªóng m√† h√†m helper c·ªßa b·∫°n tr·∫£ v·ªÅ)
                if (realDataSummary == null ||
                        realDataSummary.startsWith("üì≠ Kh√¥ng c√≥ s·ª± ki·ªán") ||
                        realDataSummary.startsWith("‚ÑπÔ∏è S·ª± ki·ªán") ||
                        realDataSummary.startsWith("üìù M√¨nh kh√¥ng hi·ªÉu")) {

                    // 4. N·∫æU DB TR·ªêNG: Tr·∫£ v·ªÅ c√¢u tr·∫£ l·ªùi an to√†n, do ch√≠nh b·∫°n vi·∫øt
                    return "D·∫°, hi·ªán t·∫°i em ch∆∞a t√¨m th·∫•y s·ª± ki·ªán n√†o ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa anh/ch·ªã ·∫°. Anh/ch·ªã c√≥ mu·ªën em h·ªó tr·ª£ t·∫°o m·ªôt s·ª± ki·ªán m·ªõi kh√¥ng? üòä";
                }

                // 5. N·∫æU C√ì D·ªÆ LI·ªÜU TH·∫¨T: Tr·∫£ v·ªÅ d·ªØ li·ªáu ƒë√≥
                return realDataSummary;
            }
            // --- K·∫æT TH√öC S·ª¨A L·ªñI ---


            // N·∫øu KH√îNG PH·∫¢I L√Ä T√åM KI·∫æM (v√≠ d·ª•: ch√†o h·ªèi, n√≥i chuy·ªán phi·∫øm)
            // V√Ä AI c√≥ tr·∫£ l·ªùi, th√¨ m·ªõi return text ƒë√≥
            if (!userVisibleText.isBlank()) {
                return userVisibleText;
            }

            // C√°c fallback intent c√≤n l·∫°i (kh√¥ng ph·∫£i t√¨m ki·∫øm)
            switch (fallbackIntent) {
                case BUY_TICKET -> {
                    return "‚ùå Vui l√≤ng b·∫Øt ƒë·∫ßu l·∫°i quy tr√¨nh mua v√© b·∫±ng c√°ch n√≥i 'Mua v√© [t√™n s·ª± ki·ªán]'";
                }
                case CONFIRM_ORDER, CANCEL_ORDER -> {
                    return "‚ùå Kh√¥ng c√≥ ƒë∆°n h√†ng n√†o ƒëang ch·ªù x√°c nh·∫≠n. Vui l√≤ng b·∫Øt ƒë·∫ßu quy tr√¨nh mua v√© tr∆∞·ªõc.";
                }
                case QUERY_TICKET_INFO -> {
                    return handleTicketInfoQuery(userInput, userVector);
                }
                case PROMPT_FREE_TIME -> {
                    TimeContext timeContext = TimeSlotUnit.extractTimeContext(userInput);
                    String placeName = ""; // c√≥ th·ªÉ tr√≠ch t·ª´ userInput n·∫øu c·∫ßn
                    List<Event> busyEvents;

                    if (!placeName.isEmpty()) {
                        Place place = placeService.findPlaceByName(placeName).orElse(null);
                        if (place != null) {
                            busyEvents = eventService.getEventsByPlace(place.getId());
                        } else {
                            return "‚ùå Kh√¥ng t√¨m th·∫•y ƒë·ªãa ƒëi·ªÉm: " + placeName;
                        }
                    } else {
                        busyEvents = eventService.getAllEvents();
                    }

                    List<Event> filtered;
                    switch (timeContext) {
                        case TODAY -> filtered = TimeSlotUnit.filterEventsToday(busyEvents);
                        case TOMORROW -> filtered = TimeSlotUnit.filterEventsTomorrow(busyEvents);
                        case THIS_WEEK -> filtered = TimeSlotUnit.filterEventsThisWeek(busyEvents);
                        case NEXT_WEEK -> filtered = TimeSlotUnit.filterEventsNextWeek(busyEvents);
                        default -> filtered = busyEvents;
                    }

                    List<TimeSlot> freeSlots = TimeSlotUnit.findFreeTime(filtered);

                    StringBuilder sb = new StringBuilder("üìÜ C√°c kho·∫£ng th·ªùi gian r·∫£nh");
                    if (!placeName.isEmpty()) sb.append(" t·∫°i ").append(placeName);
                    sb.append(":\n");

                    if (freeSlots.isEmpty()) {
                        sb.append("‚ùå Kh√¥ng c√≥ kho·∫£ng th·ªùi gian r·∫£nh trong ").append(timeContext).append("\n");
                    } else {
                        for (TimeSlot slot : freeSlots) {
                            sb.append(" - ").append(slot.toString()).append("\n");
                        }
                    }
                    return sb.toString();
                }
                case PROMPT_SUMMARY_TIME -> {
                    try {
                        String summary = handleSummaryRequest(userInput, userId);
                        return (summary != null)
                                ? summary
                                : "üìù M√¨nh kh√¥ng hi·ªÉu kho·∫£ng th·ªùi gian b·∫°n mu·ªën t·ªïng h·ª£p. B·∫°n c√≥ th·ªÉ h·ªèi ki·ªÉu nh∆∞: \"L·ªãch h√¥m nay\", \"S·ª± ki·ªán tu·∫ßn sau\"...";
                    } catch (Exception e) {
                        log.error("Summary error: {}", e.getMessage(), e);
                        return "‚ö†Ô∏è ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu t·ªïng h·ª£p l·ªãch.";
                    }
                }
                case PROMPT_SEND_EMAIL -> {
                    Pattern patternTime = Pattern.compile("tr∆∞·ªõc (\\d{1,3}) ?(ph√∫t|gi·ªù)");
                    Matcher matcherTime = patternTime.matcher(userInput.toLowerCase());

                    if (!matcherTime.find()) {
                        return "‚ùì B·∫°n mu·ªën t√¥i nh·∫Øc tr∆∞·ªõc bao nhi√™u ph√∫t ho·∫∑c gi·ªù? (V√≠ d·ª•: 'tr∆∞·ªõc 45 ph√∫t').";
                    }

                    int value = Integer.parseInt(matcherTime.group(1));
                    String unit = matcherTime.group(2);
                    int remindMinutes = unit.equals("gi·ªù") ? value * 60 : value;

                    String eventTitle = classifier.classifyEventTitle(userInput, userVector);
                    Optional<Event> targetEventOpt = Optional.empty();

                    if (eventTitle != null && !eventTitle.isBlank()) {
                        try {
                            List<Event> results = eventVectorSearchService.searchEvents(eventTitle, userId, 1);
                            if (!results.isEmpty()) targetEventOpt = Optional.of(results.get(0));
                        } catch (Exception e) {
                            log.error("Vector search failed for event title: {}", e.getMessage());
                        }
                    }

                    if (targetEventOpt.isEmpty()) {
                        targetEventOpt = eventService.getNextUpcomingEventByUserId(userId);
                        if (targetEventOpt.isEmpty()) {
                            return "‚ùì M√¨nh kh√¥ng t√¨m th·∫•y s·ª± ki·ªán c·ª• th·ªÉ n√†o trong y√™u c·∫ßu ho·∫∑c s·ª± ki·ªán s·∫Øp t·ªõi n√†o trong l·ªãch c·ªßa b·∫°n.";
                        }
                    }

                    Event finalEvent = targetEventOpt.get();
                    Optional<Customer> customerOpt = userRepo.findByAccount_AccountId(userId);
                    if (customerOpt.isEmpty() || customerOpt.get().getAccount() == null) {
                        return "‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin t√†i kho·∫£n c·ªßa b·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.";
                    }

                    String userEmail = customerOpt.get().getAccount().getEmail();
                    if (userEmail == null || userEmail.trim().isEmpty()) {
                        return "‚ùå T√†i kho·∫£n c·ªßa b·∫°n ch∆∞a c√≥ ƒë·ªãa ch·ªâ email. Vui l√≤ng c·∫≠p nh·∫≠t email trong th√¥ng tin c√° nh√¢n.";
                    }

                    agentEventService.createOrUpdateEmailReminder(finalEvent.getId(), remindMinutes, userId);
                    return "‚úÖ T√¥i ƒë√£ c·∫≠p nh·∫≠t l·ªãch nh·∫Øc nh·ªü c·ªßa b·∫°n v·ªÅ s·ª± ki·ªán \"" + finalEvent.getTitle() +
                            "\" tr∆∞·ªõc " + remindMinutes + " ph√∫t khi s·ª± ki·ªán b·∫Øt ƒë·∫ßu.\n" +
                            "üìß Email s·∫Ω ƒë∆∞·ª£c g·ª≠i ƒë·∫øn: " + userEmail;
                }
                case UNKNOWN, ERROR -> {
                    return "‚ùì T√¥i kh√¥ng hi·ªÉu y√™u c·∫ßu c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ th·ª≠ h·ªèi v·ªÅ vi·ªác t·∫°o s·ª± ki·ªán, xem s·ª± ki·ªán, ho·∫∑c nh·∫Øc b·∫°n b·∫±ng gmail.";
                }
            }
        }

        // N·∫øu c√≥ c·∫£ userVisibleText v√† systemResult
        if (!systemResult.isEmpty()) {
            String fullResponse = (userVisibleText + "\n\n" + systemResult.toString().trim()).trim();
            if (shouldReload) fullResponse += "\n__RELOAD__";
            return fullResponse;
        }

        // M·∫∑c ƒë·ªãnh tr·∫£ text t·ª± nhi√™n
        return userVisibleText;
    }

    /* =========================
       Helpers
       ========================= */

    public static List<Action> tryParseActions(String jsonPart) {
        try {
            if (jsonPart == null || jsonPart.isEmpty()) {
                return Collections.emptyList();
            }
            ObjectMapper objectMapper = new ObjectMapper();
            List<Action> list = Arrays.asList(objectMapper.readValue(jsonPart, Action[].class));
            log.info("Parsed {} action(s).", list.size());
            return list;
        } catch (Exception e) {
            log.warn("Kh√¥ng th·ªÉ parse Action(s): {}", e.getMessage());
            log.debug("JSON:\n{}", jsonPart);
            return Collections.emptyList();
        }
    }

    private LocalDateTime tryParseDateTime(String input) {
        List<String> patterns = List.of(
                "yyyy-MM-dd'T'HH:mm",
                "yyyy-MM-dd HH:mm",
                "dd/MM/yyyy HH:mm",
                "dd-MM-yyyy HH:mm"
        );

        for (String pattern : patterns) {
            try {
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern(pattern);
                return LocalDateTime.parse(input, formatter);
            } catch (Exception ignored) {}
        }
        throw new IllegalArgumentException("‚ùå Kh√¥ng th·ªÉ parse ng√†y gi·ªù: " + input);
    }

    public String handleSummaryRequest(String userInputs, Long userId) throws Exception {
        LocalDateTime now = LocalDateTime.now();
        LocalDateTime start;
        String range;

        if (userInputs.contains("h√¥m nay")) {
            start = now.toLocalDate().atStartOfDay();
            range = "h√¥m nay";
        } else if (userInputs.contains("ng√†y mai")) {
            start = now.plusDays(1).toLocalDate().atStartOfDay();
            range = "ng√†y mai";
        } else if (userInputs.contains("tu·∫ßn n√†y")) {
            DayOfWeek dow = now.getDayOfWeek();
            start = now.minusDays(dow.getValue() - 1).toLocalDate().atStartOfDay(); // Monday
            range = "tu·∫ßn n√†y";
        } else if (userInputs.contains("tu·∫ßn sau")) {
            DayOfWeek dow = now.getDayOfWeek();
            start = now.minusDays(dow.getValue() - 1).toLocalDate().atStartOfDay().plusWeeks(1);
            range = "tu·∫ßn sau";
        } else {
            // M·∫∑c ƒë·ªãnh: t√¨m T·∫§T C·∫¢ s·ª± ki·ªán s·∫Øp di·ªÖn ra
            start = now;
            range = "s·∫Øp di·ªÖn ra";
        }

        List<Event> allEvents = eventService.getAllEvents();

        List<Event> events = allEvents.stream()
                // L·ªçc s·ª± ki·ªán ch∆∞a k·∫øt th√∫c
                .filter(event -> event.getEndsAt().isAfter(start))

                // --- THAY ƒê·ªîI QUAN TR·ªåNG ---
                // L·ªçc b·ªè c√°c s·ª± ki·ªán c√≥ tr·∫°ng th√°i DRAFT ho·∫∑c CANCEL
                .filter(event -> event.getStatus() != EventStatus.DRAFT && event.getStatus() != EventStatus.CANCEL)
                // --- K·∫æT TH√öC THAY ƒê·ªîI ---

                .sorted(Comparator.comparing(Event::getStartsAt)) // S·∫Øp x·∫øp theo th·ªùi gian
                .toList();

        if (events.isEmpty()) {
            return "üì≠ Kh√¥ng c√≥ s·ª± ki·ªán n√†o " + range + ".";
        }

        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm");

        StringBuilder sb = new StringBuilder();
        sb.append("üìÜ C√°c s·ª± ki·ªán ").append(range).append(":\n");
        for (Event e : events) {
            sb.append("‚Ä¢ ").append(e.getTitle())
                    .append(" üïí ")
                    .append(e.getStartsAt().format(formatter))
                    .append(" - ")
                    .append(e.getEndsAt().format(formatter));

            if (e.getPlaces() != null && !e.getPlaces().isEmpty()) {
                sb.append(" üìç ").append(e.getPlaces().get(0).getPlaceName());
            }
            sb.append("\n");
        }
        return sb.toString();
    }

    private String extractEventName(String userInput) {
        String cleaned = userInput
                .replaceAll("(?i)(mua v√©|mua ve|ƒëƒÉng k√Ω|ƒëƒÉng ky|tham gia|ƒë·∫∑t v√©|dat ve|book v√©|order v√©|s·ª± ki·ªán|su kien|event)", "")
                .trim();
        return cleaned;
    }

    private Map<String, String> extractParticipantInfo(String userInput) {
        Map<String, String> info = new HashMap<>();
        try {
            Pattern namePattern = Pattern.compile("(?:t√™n|ten|h·ªç t√™n|ho ten|name)\\s*:?\\s*([^,]+)", Pattern.CASE_INSENSITIVE);
            Matcher nameMatcher = namePattern.matcher(userInput);
            if (nameMatcher.find()) info.put("name", nameMatcher.group(1).trim());

            Pattern emailPattern = Pattern.compile("(?:email|mail|e-mail)\\s*:?\\s*([^,\\s]+@[^,\\s]+)", Pattern.CASE_INSENSITIVE);
            Matcher emailMatcher = emailPattern.matcher(userInput);
            if (emailMatcher.find()) info.put("email", emailMatcher.group(1).trim());

            Pattern phonePattern = Pattern.compile("(?:sƒët|sdt|phone|s·ªë ƒëi·ªán tho·∫°i|so dien thoai|ƒëi·ªán tho·∫°i|dien thoai)\\s*:?\\s*([0-9]{9,11})", Pattern.CASE_INSENSITIVE);
            Matcher phoneMatcher = phonePattern.matcher(userInput);
            if (phoneMatcher.find()) info.put("phone", phoneMatcher.group(1).trim());

            Pattern orgPattern = Pattern.compile("(?:t·ªï ch·ª©c|to chuc|organization|c√¥ng ty|cong ty|tr∆∞·ªùng|truong)\\s*:?\\s*([^,]+)", Pattern.CASE_INSENSITIVE);
            Matcher orgMatcher = orgPattern.matcher(userInput);
            if (orgMatcher.find()) info.put("organization", orgMatcher.group(1).trim());

        } catch (Exception e) {
            log.warn("Error extracting participant info: {}", e.getMessage());
        }
        return info;
    }

    private String getStr(Map<String, Object> m, String... keys) {
        for (String k : keys) {
            Object v = m.get(k);
            if (v != null && !v.toString().isBlank()) return v.toString().trim();
        }
        return null;
    }

    private LocalDateTime getTime(Map<String, Object> m, String... keys) {
        String s = getStr(m, keys);
        return (s == null) ? null : tryParseDateTime(s);
    }

    private Long getLong(Map<String, Object> m, String... keys) {
        for (String k : keys) {
            Object v = m.get(k);
            if (v == null) continue;

            if (v instanceof Number num) {
                return num.longValue();
            }
            if (v instanceof String s) {
                s = s.trim();
                if (s.isEmpty()) continue;
                try {
                    return Long.parseLong(s);
                } catch (NumberFormatException ignore) { }
            }
        }
        return null;
    }

    /**
     * X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ th√¥ng tin v√© t·ª´ database th·ª±c t·∫ø
     */
    private String handleTicketInfoQuery(String userInput, float[] userVector) {
        log.debug("handleTicketInfoQuery called with: '{}'", userInput);
        try {
            List<Event> foundEvents = eventVectorSearchService.searchEvents(userInput, 0L, 1);
            if (foundEvents.isEmpty()) {
                return "T√¥i hi·ªÉu b·∫°n mu·ªën xem th√¥ng tin v√©, nh∆∞ng t√¥i ch∆∞a nh·∫≠n ra t√™n s·ª± ki·ªán. B·∫°n c√≥ th·ªÉ cho t√¥i bi·∫øt t√™n s·ª± ki·ªán c·ª• th·ªÉ ƒë∆∞·ª£c kh√¥ng?";
            }

            Event event = foundEvents.get(0);
            List<TicketType> ticketTypes = ticketTypeService.getTicketTypesByEventId(event.getId());
            if (ticketTypes.isEmpty()) {
                return "‚ÑπÔ∏è S·ª± ki·ªán \"" + event.getTitle() + "\" hi·ªán ch∆∞a c√≥ th√¥ng tin v√© n√†o ƒë∆∞·ª£c m·ªü b√°n.";
            }

            StringBuilder response = new StringBuilder();
            response.append("üé´ **Th√¥ng tin v√© cho s·ª± ki·ªán: ").append(event.getTitle()).append("**\n");
            response.append("------------------------------------\n");

            for (TicketType ticket : ticketTypes) {
                response.append("‚Ä¢ **Lo·∫°i v√©:** ").append(ticket.getName()).append("\n");
                response.append("  - **Gi√°:** ").append(String.format("%,d", ticket.getFinalPrice())).append(" VNƒê\n");
                response.append("  - **C√≤n l·∫°i:** ").append(ticket.getAvailableQuantity()).append(" v√©\n");
                if (ticket.getDescription() != null && !ticket.getDescription().trim().isEmpty()) {
                    response.append("  - *M√¥ t·∫£:* ").append(ticket.getDescription()).append("\n");
                }
                response.append("\n");
            }

            response.append("üí° ƒê·ªÉ mua v√©, b·∫°n ch·ªâ c·∫ßn n√≥i 'Mua v√© ").append(event.getTitle()).append("' nh√©!");
            return response.toString();

        } catch (Exception e) {
            log.error("Error handling ticket info query: {}", e.getMessage(), e);
            return "‚ùå ƒê√£ c√≥ l·ªói x·∫£y ra khi t√¥i c·ªë g·∫Øng l·∫•y th√¥ng tin v√©. Vui l√≤ng th·ª≠ l·∫°i sau.";
        }
    }
}
