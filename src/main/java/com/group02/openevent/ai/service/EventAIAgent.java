package com.group02.openevent.ai.service;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.group02.openevent.ai.dto.Action;
import com.group02.openevent.ai.dto.Message;
import com.group02.openevent.ai.dto.TimeSlot;
import com.group02.openevent.ai.qdrant.model.ActionType;
import com.group02.openevent.ai.qdrant.model.PendingEvent;
import com.group02.openevent.ai.qdrant.model.TimeContext;
import com.group02.openevent.ai.qdrant.service.VectorIntentClassifier;
import com.group02.openevent.model.enums.EventStatus;
import com.group02.openevent.model.enums.EventType;
import com.group02.openevent.model.event.Event;
import com.group02.openevent.model.event.Place;
import com.group02.openevent.service.EventService;
import com.group02.openevent.service.PlaceService;
import com.group02.openevent.util.TimeSlotUnit;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.io.Serializable;
import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Service
public class EventAIAgent implements Serializable {
    
    private final LLM llm;
    private final List<Message> conversationHistory;
    private final Map<String, PendingEvent> pendingEvents = new HashMap<>();
    private final EmbeddingService embeddingService;
    private final PlaceService placeService;
    private final EventService eventService;
    private final AgentEventService agentEventService;
    private final VectorIntentClassifier classifier;
    private final WeatherService weatherService;

    public EventAIAgent(EmbeddingService embeddingService, 
                       PlaceService placeService,
                       EventService eventService,
                       AgentEventService agentEventService,
                       VectorIntentClassifier classifier,
                       WeatherService weatherService) {
        this.embeddingService = embeddingService;
        this.placeService = placeService;
        this.eventService = eventService;
        this.agentEventService = agentEventService;
        this.classifier = classifier;
        this.weatherService = weatherService;
        this.llm = new LLM();
        this.conversationHistory = new ArrayList<>();
        initializeSystemMessage();
    }

        private void initializeSystemMessage() {
            StringBuilder systemPrompt = new StringBuilder();

            systemPrompt.append("""
B·∫°n l√† m·ªôt Tr·ª£ l√Ω AI gi√∫p ng∆∞·ªùi d√πng qu·∫£n l√Ω s·ª± ki·ªán v√† lu√¥n nh·ªõ c√°c ng√†y l·ªÖ v√† s·ª± ki·ªán quan tr·ªçng c·ªßa Vi·ªát Nam.
H√£y hi·ªÉu ng√¥n ng·ªØ t·ª± nhi√™n, linh ho·∫°t v·ªõi c√°c m√¥ t·∫£ nh∆∞ "t·ªëi nay", "cu·ªëi tu·∫ßn", v.v.

## M·ª§C TI√äU:
- G·ª£i √Ω, t·∫°o, s·ª≠a, ho·∫∑c xo√° s·ª± ki·ªán.
- Lu√¥n ph·∫£n h·ªìi b·∫±ng vƒÉn b·∫£n t·ª± nhi√™n (kh√¥ng hi·ªán JSON).
- N·∫øu thi·∫øu th√¥ng tin, h√£y h·ªèi l·∫°i ng∆∞·ªùi d√πng.
- B·∫°n h√£y ph·∫£n h·ªìi d·ª±a theo system message

## X·ª¨ L√ù T·∫†O S·ª∞ KI·ªÜN:
1. N·∫øu ng∆∞·ªùi d√πng y√™u c·∫ßu t·∫°o s·ª± ki·ªán:
- Khi ng∆∞·ªùi d√πng y√™u c·∫ßu t·∫°o s·ª± ki·ªán (v√≠ d·ª•: "L√™n s·ª± ki·ªán", "T·∫°o s·ª± ki·ªán",...), b·∫°n ph·∫£i x√°c ƒë·ªãnh v√† xu·∫•t h√†nh ƒë·ªông n·ªôi b·ªô l√† `ADD_EVENT`.
- N·∫øu th√¥ng tin s·ª± ki·ªán ƒë·∫ßy ƒë·ªß (ti√™u ƒë·ªÅ, th·ªùi gian b·∫Øt ƒë·∫ßu, th·ªùi gian k·∫øt th√∫c, ƒë·ªãa ƒëi·ªÉm...), h√£y xu·∫•t ra m·ªôt JSON h√†nh ƒë·ªông n·ªôi b·ªô theo ƒë·ªãnh d·∫°ng sau:            
   [
     {
       "toolName": "ADD_EVENT",
            "args": {
              "event_title": "...",
              "event_type": "...",
              "description": "...",
              "starts_at": "YYYY-MM-DDTHH:mm",
              "ends_at": "YYYY-MM-DDTHH:mm",
              "enroll_deadline": "YYYY-MM-DDTHH:mm",
              "public_date": "YYYY-MM-DDTHH:mm",
              "status": "...", 
              "image_url": "...",
              "benefits": "...",
              "learning_objects": "...",
              "points": ...,
              "competition_type": "...",
              "prize_pool": "...",
              "rules": "...",
              "culture": "...",
              "highlight": "...",
              "materials_link": "...",
              "topic": "...",
              "parent_event_id": null
       }
     }
   ]
- Kh√¥ng gi·∫£i th√≠ch hay hi·ªÉn th·ªã n·ªôi dung JSON cho ng∆∞·ªùi d√πng.
2. N·∫øu th·ªùi ti·∫øt c√≥ kh·∫£ nƒÉng m∆∞a (do h·ªá th·ªëng th·ªùi ti·∫øt tr·∫£ v·ªÅ), h√£y ph·∫£n h·ªìi nh∆∞ sau:
   - V√≠ d·ª•: "üåß Th·ªùi ti·∫øt c√≥ th·ªÉ c√≥ m∆∞a v√†o th·ªùi gian n√†y. B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c t·∫°o s·ª± ki·ªán ngo√†i tr·ªùi n√†y kh√¥ng?"
   - N·∫øu ng∆∞·ªùi d√πng x√°c nh·∫≠n "c√≥", ti·∫øp t·ª•c t·∫°o s·ª± ki·ªán tr∆∞·ªõc ƒë√≥ ƒëang ch·ªù (`PendingEvent`).
   - N·∫øu ng∆∞·ªùi d√πng t·ª´ ch·ªëi, kh√¥ng t·∫°o s·ª± ki·ªán.

3. N·∫øu ƒê·ªãa ƒëi·ªÉm v√† th·ªùi gian y√™u c·∫ßu tr√πng v·ªõi s·ª± ki·ªán ƒë√£ c√≥:
   - **Kh√¥ng t·ª± √Ω t·∫°o s·ª± ki·ªán!**
   - H·ªèi l·∫°i ng∆∞·ªùi d√πng:  
     > "‚è∞ Th·ªùi gian b·∫°n ch·ªçn ƒëang b·ªã tr√πng v·ªõi m·ªôt s·ª± ki·ªán kh√°c. B·∫°n c√≥ mu·ªën ch·ªçn th·ªùi gian ho·∫∑c ƒë·ªãa ƒëi·ªÉm kh√°c kh√¥ng?"

## KHI S·ª¨A S·ª∞ KI·ªÜN:
- Khi ng∆∞·ªùi d√πng n√≥i c√°c c√¢u nh∆∞:
    -"Thay ƒë·ªïi th·ªùi gian c·ªßa s·ª± ki·ªán `workshop` l·∫°i"
    -"S·ª≠a s·ª± ki·ªán `event_id` = 1"
    -"Update s·ª± ki·ªán"
    => Hi·ªÉu l√† ng∆∞·ªùi d√πng mu·ªën** S·ª≠a s·ª± ki·ªán"
- N·∫øu c√≥ `event_id`, d√πng n√≥.
- N·∫øu kh√¥ng, d√πng `original_title` ƒë·ªÉ t√¨m s·ª± ki·ªán c·∫ßn s·ª≠a.
- V√≠ d·ª•:
[
  {
    "toolName": "UPDATE_EVENT",
    "args": {
      "event_id": 123,
      "original_title": "workshop c≈©",
      "title": "workshop m·ªõi",
      "start_time": "YYYY-MM-DDTHH:mm",
      "description": "m√¥ t·∫£ m·ªõi"
    }
  }
]
- Kh√¥ng gi·∫£i th√≠ch hay hi·ªÉn th·ªã n·ªôi dung JSON cho ng∆∞·ªùi d√πng.

## KHI XO√Å S·ª∞ KI·ªÜN:
- Khi ng∆∞·ªùi d√πng n√≥i c√°c c√¢u nh∆∞:
    -"X√≥a s·ª± ki·ªán `music` ng√†y 21 th√°ng 7"
    -"X√≥a cu·ªôc thi Hackathon"
    -"X√≥a s·ª± ki·ªán `event_id` = 1"
    => Hi·ªÉu l√† ng∆∞·ªùi d√πng mu·ªën** X√≥a s·ª± ki·ªán"
- D√πng `event_id` n·∫øu c√≥, ho·∫∑c `title` n·∫øu kh√¥ng c√≥ ID.
- V√≠ d·ª•:
[
  { "toolName": "DELETE_EVENT", "args": { "event_id": 42 } }
]
ho·∫∑c
[
  { "toolName": "DELETE_EVENT", "args": { "title": "T√™n s·ª± ki·ªán" } }
]
- Kh√¥ng gi·∫£i th√≠ch hay hi·ªÉn th·ªã n·ªôi dung JSON cho ng∆∞·ªùi d√πng.
                            

## NGUY√äN T·∫ÆC:
- Tr√°nh d√πng t·ª´ k·ªπ thu·∫≠t v·ªõi ng∆∞·ªùi d√πng.
- N·∫øu ph√°t hi·ªán ƒë·ªãa ƒëi·ªÉm v√† th·ªùi gian b·ªã tr√πng v·ªõi s·ª± ki·ªán kh√°c, h√£y h·ªèi l·∫°i ng∆∞·ªùi d√πng m·ªôt th·ªùi gian kh√°c ho·∫∑c m·ªôt ƒë·ªãa ƒëi·ªÉm kh√°c. Kh√¥ng t·ª± √Ω th√™m n·∫øu b·ªã tr√πng.
- Lu√¥n di·ªÖn gi·∫£i √Ω ƒë·ªãnh r√µ r√†ng, th√¢n thi·ªán.
- Ng√†y hi·ªán t·∫°i l√† """ + LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy")) + ".\n");
// Kh√¥ng c·∫ßn ƒëo·∫°n hi·ªÉn th·ªã m√¥ t·∫£ l·∫°i n·ªôi dung cho ng∆∞·ªùi d√πng n·ªØa
            systemPrompt.append("- N·∫øu ch∆∞a r√µ n·ªôi dung ho·∫∑c ng∆∞·ªùi d√πng ch∆∞a x√°c nh·∫≠n th·ªùi gian g·ª£i √Ω, h√£y h·ªèi l·∫°i ng∆∞·ªùi d√πng tr∆∞·ªõc khi tr·∫£ v·ªÅ JSON.\n");

            systemPrompt.append("C√°c lo·∫°i Event:\n");
            for (EventType type : EventType.values()) {
                systemPrompt.append("- ").append(type.name()).append("\n");
            }

            conversationHistory.add(new Message("system", systemPrompt.toString()));
        }


        /**
         * Process user input and generate AI response
         */
        @Transactional
        public String processUserInput(String userInput, int userId, HttpServletResponse response) throws Exception {
//        String intenttoolEvent = classifier.classiftoolEvent(userInput);
            boolean shouldReload = false;
            StringBuilder systemResult = new StringBuilder();
            if (pendingEvents.containsKey(String.valueOf(userId))) {
                String answer = userInput.trim().toLowerCase();

                if (answer.contains("c√≥") || answer.contains("ok") || answer.contains("ti·∫øp t·ª•c")) {
                    Event pending = pendingEvents.remove(String.valueOf(userId)).getEvent();
                    agentEventService.saveEvent(pending);
                    systemResult.append("üìÖ ƒê√£ t·∫°o s·ª± ki·ªán: ").append(pending.getTitle());
                } else if (answer.contains("kh√¥ng")) {
                    pendingEvents.remove(String.valueOf(userId));
                    systemResult.append("‚ùå ƒê√£ h·ªßy t·∫°o s·ª± ki·ªán do b·∫°n t·ª´ ch·ªëi.");
                } else {
                    systemResult.append("‚ùìB·∫°n c√≥ th·ªÉ x√°c nh·∫≠n l·∫°i: c√≥/kh√¥ng?");
                }
                return systemResult.toString();
            }


            conversationHistory.add(new Message("user", userInput));
            String aiResponse = llm.generateResponse(conversationHistory);

            // After: String aiResponse = llm.generateResponse(conversationHistory);
            aiResponse = aiResponse
                    .replaceAll("(?s)```json\\s*", "")
                    .replaceAll("(?s)```\\s*", "");

            // Extract JSON block (tool actions)
            Pattern jsonPattern = Pattern.compile("(\\[\\s*\\{[\\s\\S]*?\\}\\s*\\])");
            Matcher matcher = jsonPattern.matcher(aiResponse);
            String jsonPart = matcher.find() ? matcher.group() : null;

            // ‚úÖ Text for user (LLM natural text without JSON)
            String userVisibleText = (jsonPart != null)
                    ? aiResponse.replace(jsonPart, "").trim()
                    : aiResponse.trim();

            // Parse actions after we have userVisibleText
            List<Action> actions = tryParseActions(jsonPart);

            if (actions != null && !actions.isEmpty()) {

                for (Action action : actions) {
                    String tool = action.getToolName();

                    try {
                        switch (tool) {
                            case "ADD_EVENT" -> {
                                if (!action.getArgs().containsKey("title")
                                        || !action.getArgs().containsKey("start_time")
                                        || !action.getArgs().containsKey("end_time")) {
                                    systemResult.append("üìù Thi·∫øu th√¥ng tin s·ª± ki·ªán (ti√™u ƒë·ªÅ ho·∫∑c th·ªùi gian).\n");
                                    continue;
                                }

                                String title = (String) action.getArgs().get("title");
                                String rawStart = (String) action.getArgs().get("start_time");
                                String rawEnd = (String) action.getArgs().get("end_time");

                                LocalDateTime start = tryParseDateTime(rawStart);
                                LocalDateTime end = tryParseDateTime(rawEnd);

                                // 1. Check tr√πng th·ªùi gian & ƒë·ªãa ƒëi·ªÉm
                                String placeName = (String) action.getArgs().getOrDefault("place", "");
                                Optional<Place> placeOpt = placeService.findPlaceByName(placeName);

                                if (placeOpt.isPresent()) {
                                    List<Place> placeList = List.of(placeOpt.get()); // t·∫°o list 1 ph·∫ßn t·ª≠
                                    List<Event> conflicted = eventService.isTimeConflict(start, end, placeList);

                                    if (!conflicted.isEmpty()) {
                                        systemResult.append("‚ö†Ô∏è S·ª± ki·ªán b·ªã tr√πng th·ªùi gian/ƒë·ªãa ƒëi·ªÉm v·ªõi:\n");
                                        for (Event conflict : conflicted) {
                                            systemResult.append(" - ").append(conflict.getTitle())
                                                    .append(" (").append(conflict.getStartsAt())
                                                    .append(" - ").append(conflict.getEndsAt()).append(")\n");
                                        }
                                        continue;
                                    }
                                }

                                Event event = new Event();

// B·∫Øt bu·ªôc
                                event.setTitle(title);
                                event.setStartsAt(start);
                                event.setEndsAt(end);
                                event.setCreatedAt(LocalDateTime.now());
                                event.setEnrollDeadline(LocalDateTime.now().plusDays(1)); // m·∫∑c ƒë·ªãnh h·∫°n ƒëƒÉng k√Ω +1 ng√†y
                                event.setStatus(EventStatus.DRAFT);   // m·∫∑c ƒë·ªãnh khi t·∫°o m·ªõi
                                event.setEventType(EventType.OTHERS); // m·∫∑c ƒë·ªãnh n·∫øu ch∆∞a ph√¢n lo·∫°i

// T√πy ch·ªçn
                                if (action.getArgs().containsKey("description")) {
                                    event.setDescription((String) action.getArgs().get("description"));
                                }
                                if (action.getArgs().containsKey("image_url")) {
                                    event.setImageUrl((String) action.getArgs().get("image_url"));
                                }
                                if (action.getArgs().containsKey("benefits")) {
                                    event.setBenefits((String) action.getArgs().get("benefits"));
                                }


// Place (nhi·ªÅu- nhi·ªÅu)
                                if (action.getArgs().containsKey("place")) {
                                    String name = (String) action.getArgs().get("place");
                                    Place place = placeService.findPlaceByName(name)
                                            .orElse(null);
                                    if (place != null) {
                                        event.setPlaces(List.of(place));
                                    } else {
                                        systemResult.append("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ƒë·ªãa ƒëi·ªÉm: ").append(placeName).append("\n");
                                        continue;
                                    }
                                }

// Parent Event
                                if (action.getArgs().containsKey("parent_event_id")) {
                                    Long parentId = (Long) action.getArgs().get("parent_event_id");
                                    Event parent = eventService.getEventByEventId(parentId).orElse(null);
                                    if (parent != null) {
                                        event.setParentEvent(parent);
                                    }
                                }

                                String intentWeather = classifier.classifyWeather(userInput);
                                if (intentWeather.equals("outdoor_activities")) {
                                    String forecastNote = weatherService.getForecastNote(start, "Da Nang");
                                    if (forecastNote != null && !forecastNote.isEmpty()) {
                                        pendingEvents.put("default", new PendingEvent(event));
                                        systemResult.append("üå¶ ").append(forecastNote).append("\n").
                                                append("‚ùìB·∫°n c√≥ mu·ªën ti·∫øp t·ª•c t·∫°o s·ª± ki·ªán ngo√†i tr·ªùi n√†y kh√¥ng?").
                                                append("\n");
                                        continue;
                                    } else {

                                        System.out.println("‚õÖ Th·ªùi ti·∫øt t·ªët, t·ª± ƒë·ªông th√™m s·ª± ki·ªán.");
                                    }

                                }
                                
                                try {
                                    agentEventService.saveEvent(event);
                                    systemResult.append("‚úÖ ƒê√£ th√™m s·ª± ki·ªán: ").append(title).append(" v√†o l·ªãch tr√¨nh.\n");
                                    shouldReload = true;
                                    System.out.println("‚úÖ Event saved successfully: " + title + " with ID: " + event.getId());
                                } catch (Exception e) {
                                    e.printStackTrace();
                                    systemResult.append("‚ùå L·ªói khi l∆∞u s·ª± ki·ªán: ").append(e.getMessage()).append("\n");
                                    System.err.println("‚ùå Failed to save event: " + title + " - " + e.getMessage());
                                }

                            }

                            case "UPDATE_EVENT" -> {
                                Event existing = null;

                                // 1. T√¨m s·ª± ki·ªán theo id ho·∫∑c title
                                if (action.getArgs().containsKey("event_id")) {
                                    long eventId = (long) action.getArgs().get("event_id");
                                    existing = eventService.getEventByEventId(eventId).orElse(null); // service tr·∫£ v·ªÅ Optional<Event>
                                } else if (action.getArgs().containsKey("original_title")) {
                                    String oriTitle = (String) action.getArgs().get("original_title");
                                    existing = eventService.getFirstEventByTitle(oriTitle).orElse(null);
                                    System.out.println("üîé T√¨m theo title: " + oriTitle);
                                }

                                if (existing == null) {
                                    systemResult.append("‚ùå Kh√¥ng t√¨m th·∫•y s·ª± ki·ªán ƒë·ªÉ c·∫≠p nh·∫≠t.\n");
                                    continue;
                                }

                                // 2. C·∫≠p nh·∫≠t c√°c field cho event
                                if (action.getArgs().containsKey("title")) {
                                    existing.setTitle((String) action.getArgs().get("title"));
                                }
                                if (action.getArgs().containsKey("start_time")) {
                                    existing.setStartsAt(tryParseDateTime((String) action.getArgs().get("start_time")));
                                }
                                if (action.getArgs().containsKey("end_time")) {
                                    existing.setEndsAt(tryParseDateTime((String) action.getArgs().get("end_time")));
                                }
                                if (action.getArgs().containsKey("description")) {
                                    existing.setDescription((String) action.getArgs().get("description"));
                                }
                                if (action.getArgs().containsKey("image_url")) {
                                    existing.setImageUrl((String) action.getArgs().get("image_url"));
                                }
                                if (action.getArgs().containsKey("benefits")) {
                                    existing.setBenefits((String) action.getArgs().get("benefits"));
                                }

                                if (action.getArgs().containsKey("status")) {
                                    try {
                                        existing.setStatus(EventStatus.valueOf((String) action.getArgs().get("status")));
                                    } catch (IllegalArgumentException e) {
                                        systemResult.append("‚ö†Ô∏è Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá, gi·ªØ nguy√™n tr·∫°ng th√°i c≈©.\n");
                                    }
                                }

                                // 3. C·∫≠p nh·∫≠t ƒë·ªãa ƒëi·ªÉm (n·∫øu c√≥)
                                if (action.getArgs().containsKey("place")) {
                                    String placeName = (String) action.getArgs().get("place");
                                    Place place = placeService.findPlaceByName(placeName).orElse(null);
                                    if (place != null) {
                                        existing.setPlaces(List.of(place));
                                    } else {
                                        systemResult.append("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ƒë·ªãa ƒëi·ªÉm: ").append(placeName).append("\n");
                                    }
                                }

                                // 4. L∆∞u l·∫°i s·ª± ki·ªán
                                eventService.saveEvent(existing);
                                systemResult.append("üîÑ ƒê√£ c·∫≠p nh·∫≠t s·ª± ki·ªán: ").append(existing.getTitle()).append("\n");
                                shouldReload = true;
                            }

                            case "DELETE_EVENT" -> {
                                boolean deletedOne = false;
                                if (action.getArgs().containsKey("event_id")) {
                                    long id = (long) action.getArgs().get("event_id");
                                    deletedOne = eventService.removeEvent(id);
                                } else if (action.getArgs().containsKey("title")) {
                                    String title = (String) action.getArgs().get("title");
                                    deletedOne = eventService.deleteByTitle(title);
                                }

                                if (deletedOne) {
                                    shouldReload = true;
                                } else {
                                    systemResult.append("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y s·ª± ki·ªán ƒë·ªÉ xo√°.\n");
                                }
                            }
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        systemResult.append("‚ùå L·ªói khi x·ª≠ l√Ω h√†nh ƒë·ªông: ").append(tool).append("\n");
                    }
                }
            } else {
                // 2) No actions
                if (!userVisibleText.isBlank()) {
                    // LLM already gave a natural reply ‚Üí return it, DO NOT run classifier
                    conversationHistory.add(new Message("assistant", userVisibleText));
                    return userVisibleText;
                }

                // 3) No natural text either ‚Üí now run classifier & (maybe) fallback
                System.out.println("Kh√¥ng c√≥ h√†nh ƒë·ªông n√†o & kh√¥ng c√≥ c√¢u tr·∫£ l·ªùi t·ª± nhi√™n. ƒêang ph√¢n lo·∫°i √Ω ƒë·ªãnh...");
                ActionType intent = classifier.classifyIntent(userInput);

                switch (intent) {
                    case PROMPT_FREE_TIME -> {
                        // 1. X√°c ƒë·ªãnh ng·ªØ c·∫£nh th·ªùi gian
                        TimeContext context = TimeSlotUnit.extractTimeContext(userInput);

                        // 2. L·∫•y Place t·ª´ userInput (n·∫øu c√≥)
                        String placeName = ""; // Place s·∫Ω ƒë∆∞·ª£c extract t·ª´ userInput n·∫øu c·∫ßn
                        List<Event> busyEvents;
                        if (!placeName.isEmpty()) {
                            Place place = placeService.findPlaceByName(placeName)
                                    .orElse(null);
                            if (place != null) {
                                busyEvents = eventService.getEventsByPlace(place.getId());
                            } else {
                                systemResult.append("‚ùå Kh√¥ng t√¨m th·∫•y ƒë·ªãa ƒëi·ªÉm: ").append(placeName).append("\n");
                                break;
                            }
                        } else {
                            // N·∫øu kh√¥ng c√≥ ƒë·ªãa ƒëi·ªÉm th√¨ l·∫•y t·∫•t c·∫£
                            busyEvents = eventService.getAllEvents();
                        }

                        // 3. L·ªçc theo ng·ªØ c·∫£nh th·ªùi gian
                        List<Event> filteredEvents;
                        switch (context) {
                            case TODAY -> filteredEvents = TimeSlotUnit.filterEventsToday(busyEvents);
                            case TOMORROW -> filteredEvents = TimeSlotUnit.filterEventsTomorrow(busyEvents);
                            case THIS_WEEK -> filteredEvents = TimeSlotUnit.filterEventsThisWeek(busyEvents);
                            case NEXT_WEEK -> filteredEvents = TimeSlotUnit.filterEventsNextWeek(busyEvents);
                            default -> filteredEvents = busyEvents;
                        }

                        // 4. T√¨m kho·∫£ng tr·ªëng cho Place ƒë√≥
                        List<TimeSlot> freeSlots = TimeSlotUnit.findFreeTime(filteredEvents);

                        // 5. Xu·∫•t k·∫øt qu·∫£
                        systemResult.append("üìÜ C√°c kho·∫£ng th·ªùi gian r·∫£nh");
                        if (!placeName.isEmpty()) {
                            systemResult.append(" t·∫°i ").append(placeName);
                        }
                        systemResult.append(":\n");

                        if (freeSlots.isEmpty()) {
                            systemResult.append("‚ùå Kh√¥ng c√≥ kho·∫£ng th·ªùi gian r·∫£nh trong ").append(context).append("\n");
                        } else {
                            for (TimeSlot slot : freeSlots) {
                                systemResult.append(" - ").append(slot.toString()).append("\n");
                            }
                        }
                    }

                    case PROMPT_SUMMARY_TIME -> {
                        try {
                            String summary = handleSummaryRequest(userInput, userId);
                            return (summary != null)
                                    ? summary
                                    : "üìù M√¨nh kh√¥ng hi·ªÉu kho·∫£ng th·ªùi gian b·∫°n mu·ªën t·ªïng h·ª£p. B·∫°n c√≥ th·ªÉ h·ªèi ki·ªÉu nh∆∞: \"L·ªãch h√¥m nay\", \"S·ª± ki·ªán tu·∫ßn sau\"...";
                        } catch (Exception e) {
                            e.printStackTrace();
                            return "‚ö†Ô∏è ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu t·ªïng h·ª£p l·ªãch.";
                        }
                    }
                    
                    case UNKNOWN, PROMPT_SEND_EMAIL, ERROR -> {
                        // Only add fallback when there is no useful text to show
                        systemResult.append("‚ùì T√¥i kh√¥ng hi·ªÉu y√™u c·∫ßu c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ th·ª≠ h·ªèi v·ªÅ vi·ªác t·∫°o s·ª± ki·ªán, xem l·ªãch, ho·∫∑c t√¨m th·ªùi gian r·∫£nh.");
                    }
                }
            }
            // --- Combine & return as before (only when systemResult has content)
            if (!systemResult.isEmpty()) {
                String fullResponse = (userVisibleText + "\n\n" + systemResult.toString().trim()).trim();
                if (shouldReload) fullResponse += "\n__RELOAD__";
                conversationHistory.add(new Message("assistant", fullResponse));
                return fullResponse;
            }

            // No systemResult ‚Üí return natural text (already stripped)
            conversationHistory.add(new Message("assistant", userVisibleText));
            return userVisibleText;
        }

        public static List<Action> tryParseActions(String jsonPart) {
            try {
                if (jsonPart == null || jsonPart.isEmpty()) {
                    return Collections.emptyList();
                }
                ObjectMapper objectMapper = new ObjectMapper();
                List<Action> list = Arrays.asList(objectMapper.readValue(jsonPart, Action[].class));
                System.out.println("‚úÖ Parsed " + list.size() + " action(s).");
                return list;
            } catch (Exception e) {
                System.out.println("‚ùå Kh√¥ng th·ªÉ parse Action(s): " + e.getMessage());
                System.out.println("üìÑ JSON:\n" + jsonPart);
                return Collections.emptyList();
            }
        }

        public String getGreeting() {
            List<Message> greetingMessages = new ArrayList<>();
            greetingMessages.add(conversationHistory.get(0));
            greetingMessages.add(new Message("user", "Xin ch√†o, t√¥i c·∫ßn t∆∞ v·∫•n qu·∫£n l√Ω l·ªãch tr√¨nh"));

            try {
                return llm.generateResponse(greetingMessages);
            } catch (Exception e) {
                return "ü§ñ Xin ch√†o! T√¥i l√† AI Assistant qu·∫£n l√Ω l·ªãch tr√¨nh th√¥ng minh.\n"
                        + "T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n"
                        + "‚úÖ T·∫°o l·ªãch h·ªçc t·∫≠p, c√¥ng vi·ªác, s·ª± ki·ªán\n"
                        + "‚úÖ T·ªëi ∆∞u h√≥a th·ªùi gian\n"
                        + "‚úÖ ƒê∆∞a ra l·ªùi khuy√™n qu·∫£n l√Ω th·ªùi gian\n\n"
                        + "H√£y chia s·∫ª k·∫ø ho·∫°ch c·ªßa b·∫°n ƒë·ªÉ b·∫Øt ƒë·∫ßu!";
            }
        }

        public boolean shouldEndConversation(String userInput) {
            String input = userInput.toLowerCase().trim();
            return input.equals("bye") || input.equals("t·∫°m bi·ªát")
                    || input.equals("k·∫øt th√∫c") || input.equals("quit")
                    || input.equals("exit") || input.equals("end");
        }

        public String getConversationSummary() {
            if (conversationHistory.size() <= 1) {
                return "Kh√¥ng c√≥ cu·ªôc tr√≤ chuy·ªán n√†o ƒë∆∞·ª£c ghi nh·∫≠n.";
            }

            // Ch·ªâ l·∫•y c√°c message t·ª´ user v√† assistant, b·ªè qua system message
            List<Message> userMessages = conversationHistory.stream()
                    .filter(msg -> !msg.getRole().equals("system"))
                    .collect(java.util.stream.Collectors.toList());

            if (userMessages.size() <= 1) {
                return "üì≠ Ch∆∞a c√≥ cu·ªôc tr√≤ chuy·ªán th·ª±c s·ª± n√†o ƒë∆∞·ª£c ghi nh·∫≠n.";
            }

            StringBuilder summary = new StringBuilder("üìå T√ìM T·∫ÆT CU·ªòC TR√í CHUY·ªÜN:\n");
            for (Message msg : userMessages) {
                summary.append(msg.getRole().equals("user") ? "üßë‚Äçüíª B·∫°n: " : "ü§ñ AI: ")
                        .append(msg.getContent()).append("\n");
            }
            return summary.toString();
        }

//        public List<ScheduleItem> getCurrentSchedule(int userID) {
//
//            EventService eventService = new EventService();
//            List<UserEvents> userEvents = eventService.getAllEventsByUserId(userID);
//            List<ScheduleItem> schedules = new ArrayList<>();
//
//            for (UserEvents event : userEvents) {
//                String name = event.getName();
//                LocalDateTime start = event.getStartDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime();
//                LocalDateTime end = event.getDueDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime();
//
//                ScheduleItem item = new ScheduleItem(name, start, end, null);
//
//                // ∆Øu ti√™n ho·∫∑c m√†u c√≥ th·ªÉ x√°c ƒë·ªãnh priority
//                item.setPriority("Normal");
//
//                // N·∫øu b·∫°n d√πng Enum ScheduleType th√¨ g√°n lu√¥n:
//                item.setScheduleType(ScheduleItem.ScheduleType.EVENT);
//
//                schedules.add(item);
//            }
//
//            return schedules;
//        }

        private LocalDateTime tryParseDateTime(String input) {
            List<String> patterns = List.of(
                    "yyyy-MM-dd'T'HH:mm",
                    "yyyy-MM-dd HH:mm",
                    "dd/MM/yyyy HH:mm",
                    "dd-MM-yyyy HH:mm"
            );

            for (String pattern : patterns) {
                try {
                    DateTimeFormatter formatter = DateTimeFormatter.ofPattern(pattern);
                    return LocalDateTime.parse(input, formatter);
                } catch (Exception ignored) {
                }
            }

            throw new IllegalArgumentException("‚ùå Kh√¥ng th·ªÉ parse ng√†y gi·ªù: " + input);
        }

    /**
     * Ki·ªÉm tra th·ªùi gian r·∫£nh cho ng∆∞·ªùi d√πng
     */
    private String checkFreeTimes(String userInput, int userId) throws Exception {
        List<String> freeTimeIntents = Arrays.asList(
                "G·ª£i √Ω khung gi·ªù h·ªçc m√¥n To√°n",
                "T√¥i mu·ªën bi·∫øt l√∫c n√†o r·∫£nh ƒë·ªÉ h·ªçc",
                "B·∫°n c√≥ th·ªÉ cho t√¥i bi·∫øt th·ªùi gian tr·ªëng ƒë·ªÉ l√™n l·ªãch?",
                "T√¨m kho·∫£ng th·ªùi gian r·∫£nh trong tu·∫ßn",
                "L√™n l·ªãch h·ªçc ph√π h·ª£p gi√∫p t√¥i",
                "H√£y ƒë·ªÅ xu·∫•t gi·ªù h·ªçc h·ª£p l√Ω"
        );

        // 1. Vector embedding c·ªßa input
        float[] inputVec = embeddingService.getEmbedding(userInput);

        // 2. Ki·ªÉm tra intent c√≥ ph·∫£i l√† "t√¨m free time"
        boolean isGetFreeTimeIntent = false;
        for (String example : freeTimeIntents) {
            float[] refVec = embeddingService.getEmbedding(example);
            if (embeddingService.cosineSimilarity(inputVec, refVec) > 0.82f) {
                isGetFreeTimeIntent = true;
                break;
            }
        }

        // 3. N·∫øu ƒë√∫ng intent ‚Üí x·ª≠ l√Ω
        if (isGetFreeTimeIntent) {
            // üìå L·∫•y t·∫•t c·∫£ s·ª± ki·ªán c·ªßa user
            List<Event> events = eventService.getAllEvents(); // TODO: Implement getEventByUserId method

            // üìå T√¨m kho·∫£ng tr·ªëng
            List<TimeSlot> freeSlots = TimeSlotUnit.findFreeTime(events);

            if (freeSlots.isEmpty()) {
                return "‚õî Hi·ªán b·∫°n kh√¥ng c√≥ kho·∫£ng th·ªùi gian tr·ªëng n√†o trong tu·∫ßn.";
            }

            StringBuilder response = new StringBuilder("üìÖ C√°c kho·∫£ng th·ªùi gian tr·ªëng g·ª£i √Ω:\n");
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("EEEE - dd/MM/yyyy HH:mm");

            for (TimeSlot slot : freeSlots) {
                response.append("‚Ä¢ ")
                        .append(slot.getStart().format(formatter))
                        .append(" ‚Üí ")
                        .append(slot.getEnd().format(formatter))
                        .append("\n");
            }

            return response.toString();
        }

        return null;
    }

    public String handleSummaryRequest(String userInputs, int userId) throws Exception {
        LocalDateTime now = LocalDateTime.now();
        LocalDateTime start;
        String range = null;

        if (userInputs.contains("h√¥m nay")) {
            start = now.toLocalDate().atStartOfDay();
            range = "h√¥m nay";
        } else if (userInputs.contains("ng√†y mai")) {
            start = now.plusDays(1).toLocalDate().atStartOfDay();
            range = "ng√†y mai";
        } else if (userInputs.contains("tu·∫ßn n√†y")) {
            DayOfWeek dow = now.getDayOfWeek();
            start = now.minusDays(dow.getValue() - 1).toLocalDate().atStartOfDay(); // Monday
            range = "tu·∫ßn n√†y";
        } else if (userInputs.contains("tu·∫ßn sau")) {
            DayOfWeek dow = now.getDayOfWeek();
            start = now.minusDays(dow.getValue() - 1).toLocalDate().atStartOfDay().plusWeeks(1);
            range = "tu·∫ßn sau";
        } else {
            return null;
        }

        // üìå L·∫•y s·ª± ki·ªán theo kho·∫£ng th·ªùi gian v√† user
        List<Event> allEvents = eventService.getAllEvents();
        // TODO: Implement proper filtering by date range and user
        List<Event> events = allEvents.stream()
                .filter(event -> event.getStartsAt().isAfter(start) || event.getStartsAt().isEqual(start))
                .collect(java.util.stream.Collectors.toList());

        if (events.isEmpty()) {
            return "üì≠ Kh√¥ng c√≥ s·ª± ki·ªán n√†o trong " + range + ".";
        }

        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm");

        StringBuilder sb = new StringBuilder();
        sb.append("üìÜ C√°c s·ª± ki·ªán ").append(range).append(":\n");
        for (Event e : events) {
            sb.append("‚Ä¢ ").append(e.getTitle())   // ‚ö° d√πng ƒë√∫ng field trong entity
                    .append(" üïí ")
                    .append(e.getStartsAt().format(formatter))
                    .append(" - ")
                    .append(e.getEndsAt().format(formatter));

            if (e.getPlaces() != null && !e.getPlaces().isEmpty()) {
                sb.append(" üìç ").append(e.getPlaces().get(0).getPlaceName());
            }
            sb.append("\n");
        }
        return sb.toString();
    }
}
